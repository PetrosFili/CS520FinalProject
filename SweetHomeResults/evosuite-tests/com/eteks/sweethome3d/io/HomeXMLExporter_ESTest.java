/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:15:19 GMT 2022
 */

package com.eteks.sweethome3d.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.io.HomeURLContent;
import com.eteks.sweethome3d.io.HomeXMLExporter;
import com.eteks.sweethome3d.io.XMLWriter;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Baseboard;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomeMaterial;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Polyline;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.SimpleURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeXMLExporter_ESTest extends HomeXMLExporter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      CatalogTexture catalogTexture0 = new CatalogTexture("modelRotation", (Content) null, (-2341.9128F), 0.0F);
      Wall wall0 = new Wall((-40.0F), (-40.0F), (-40.0F), 1.0F, 0.0F, 1960.27F, catalogTexture0);
      homeXMLExporter0.writeWall(xMLWriter0, wall0);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      Wall wall0 = new Wall("", 34.05F, 28.633333F, 28.633333F, 62.816666F, 28.633333F, 62.816666F, (TextureImage) null);
      wall0.setWallAtEnd(wall0);
      homeXMLExporter0.writeWall(xMLWriter0, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=UVzdN>", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      Camera camera0 = new Camera("roll", (-1.0F), 1497.6F, (-283.82F), (-283.82F), (-1.0F), 0.0F);
      homeXMLExporter0.writeCamera(xMLWriter0, camera0, "roll");
      assertEquals((-283.82F), camera0.getYaw(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      Home home0 = new Home(7.4167F);
      DimensionLine dimensionLine0 = new DimensionLine("cPdwkv:EgoJB", 7.4167F, (-3963.0F), 2260.003F, 0.0F, 7000L);
      home0.addDimensionLine(dimensionLine0);
      homeXMLExporter0.writeElement(xMLWriter0, home0);
      assertEquals(7000L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      Home home0 = new Home(1872.176F);
      home0.setProperty("PAx_egKH!7b1>a!", "PAx_egKH!7b1>a!");
      homeXMLExporter0.writeElement(xMLWriter0, home0);
      assertEquals(7000L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      Sash[] sashArray0 = new Sash[9];
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      float[] floatArray2 = new float[7];
      floatArray2[2] = (-1.0F);
      floatArray0[2] = floatArray2;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("xOrigin", "N1Cb7E", "1~@eAl~o_Gb3!+O", (Content) null, (Content) null, (Content) null, 7000L, 0.0F, 7000L, 346.53F, true, 7000L, 1754.3F, sashArray0, floatArray0, "1~@eAl~o_Gb3!+O", true, false, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow("xOrigin", catalogDoorOrWindow0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeAttributes(xMLWriter0, homeDoorOrWindow0);
      assertEquals("N1Cb7E", homeDoorOrWindow0.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.eteks.sweethome3d.io.HomeXMLExporter$4", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      String[] stringArray0 = new String[8];
      Float float0 = new Float((-1446.6381F));
      LightSource[] lightSourceArray0 = new LightSource[5];
      float[][] floatArray0 = new float[5][2];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 349.1279F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-2277.2F));
      CatalogLight catalogLight0 = new CatalogLight("Asia/Bishkek", "5G.Ww~`[yx>JpLDok", "e", "5G.Ww~`[yx>JpLDok", stringArray0, (Long) 7000L, float0, (Content) null, (Content) null, (Content) null, 7000L, (-2277.2F), (-2277.2F), 1747.8F, 1747.8F, true, lightSourceArray0, "e", floatArray0, "", false, true, true, bigDecimal0, bigDecimal0, "I}");
      HomeLight homeLight0 = new HomeLight("com.eteks.sweethome3d.io.HomeXMLExporter$4", catalogLight0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeAttributes(xMLWriter0, homeLight0);
      assertFalse(homeLight0.isResizable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      float[][] floatArray0 = new float[0][2];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 430);
      // Undeclared exception!
      try { 
        homeXMLExporter0.getId(polyline0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No Id provided for object of class com.eteks.sweethome3d.model.Polyline
         //
         verifyException("com.eteks.sweethome3d.io.HomeXMLExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-5.933333F));
      Level level0 = new Level("groundColor", (-5.933333F), 0.0F, (-1.0F));
      wall0.setLevel(level0);
      // Undeclared exception!
      try { 
        homeXMLExporter0.writeWall(xMLWriter0, wall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.io.XMLWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      Wall wall0 = new Wall("", 34.05F, 28.633333F, 28.633333F, 62.816666F, 28.633333F, 62.816666F, (TextureImage) null);
      wall0.setWallAtStart(wall0);
      homeXMLExporter0.writeWall(xMLWriter0, wall0);
      assertEquals(34.609833F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeXMLExporter0.writeMaterial(xMLWriter0, (HomeMaterial) null, temporaryURLContent0);
      assertFalse(temporaryURLContent0.isJAREntry());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 2131);
      XMLWriter xMLWriter0 = new XMLWriter(bufferedOutputStream0);
      homeXMLExporter0.writeCamera(xMLWriter0, (Camera) null, "7>G.x");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      Label label0 = new Label("", 19.530056F, 28.633333F);
      label0.setProperty("", "");
      homeXMLExporter0.writeLabel(xMLWriter0, label0);
      assertEquals("label-00000000-0100-4000-8200-000003000000", label0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      HashMap<Content, String> hashMap0 = new HashMap<Content, String>();
      homeXMLExporter0.setSavedContentNames(hashMap0);
      URL uRL0 = MockURL.getHttpExample();
      HomeURLContent homeURLContent0 = new HomeURLContent(uRL0);
      String string0 = homeXMLExporter0.getExportedContentName(fileSystemHandling0, homeURLContent0);
      assertNotNull(string0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        homeXMLExporter0.writePieceOfFurniture(xMLWriter0, (HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.io.ObjectXMLExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      homeXMLExporter0.writeRoom(xMLWriter0, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      Integer integer0 = new Integer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECT", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      HomeMaterial homeMaterial0 = new HomeMaterial("Pacific/Apia", "roll", integer0, (HomeTexture) null, (Float) null);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeXMLExporter0.writeMaterial(xMLWriter0, homeMaterial0, temporaryURLContent0);
      assertEquals("roll", homeMaterial0.getKey());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      Integer integer0 = new Integer(0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ECT", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      Float float0 = new Float(508.0F);
      HomeMaterial homeMaterial0 = new HomeMaterial("ECT", "roll", integer0, (HomeTexture) null, float0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeXMLExporter0.writeMaterial(xMLWriter0, homeMaterial0, temporaryURLContent0);
      assertEquals("ECT", homeMaterial0.getName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      Level level0 = new Level("{K{w0rc|B2RP9c4E\"U,", "{K{w0rc|B2RP9c4E\"U,", 1872.176F, 0.6666667F, 4943.431F);
      homeXMLExporter0.writeLevel(xMLWriter0, level0);
      assertEquals("{K{w0rc|B2RP9c4E\"U,", level0.getId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.REVERSE_LANDSCAPE;
      Float float0 = new Float((-2697.0F));
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 0, 0.0F, (-325.2789F), (-40.0F), 9.933333F, (-40.0F), false, false, true, float0, "", "");
      homeXMLExporter0.writePrint(xMLWriter0, homePrint0);
      assertEquals((-325.2789F), homePrint0.getPaperTopMargin(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 0.0F, 63.733334F, 811.3275F, 0.0F, (-1513.7781F), (-1513.7781F), 0.0F);
      homeXMLExporter0.writeBackgroundImage(xMLWriter0, backgroundImage0);
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[3];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.SOLID;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("roll", floatArray0, (byte)0, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, (byte) (-86), polyline_ArrowStyle0, polyline_ArrowStyle0, true, (byte)0);
      polyline0.setDashPattern(floatArray1);
      homeXMLExporter0.writePolyline(xMLWriter0, polyline0);
      assertEquals(0.0F, polyline0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      Home home0 = new Home(1872.176F);
      float[][] floatArray0 = new float[2][7];
      Polyline polyline0 = new Polyline(floatArray0);
      home0.addPolyline(polyline0);
      homeXMLExporter0.writeElement(xMLWriter0, home0);
      assertEquals(7000L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(filterOutputStream0);
      String[] stringArray0 = new String[5];
      Float float0 = new Float((float) (-2894L));
      URL uRL0 = MockURL.getHttpExample();
      HomeURLContent homeURLContent0 = new HomeURLContent(uRL0);
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[4][9];
      Long long0 = new Long((-2894L));
      BigDecimal bigDecimal0 = new BigDecimal(967L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("hj#", "hj#", "ELEVATION", "hPNBKsgR&r=wv/FH)Z", stringArray0, (Long) null, float0, homeURLContent0, homeURLContent0, homeURLContent0, (-1527.138F), 0.0F, 0.0F, 61.218056F, (-40.0F), true, "ELEVATION", 1987.9762F, (-2894L), false, true, sashArray0, floatArray0, false, long0, "hj#", true, false, false, bigDecimal0, bigDecimal0, "2)");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeXMLExporter_PieceOfFurnitureExporter0.writeChildren(xMLWriter0, homeDoorOrWindow0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.io.HomeXMLExporter$PieceOfFurnitureExporter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(filterOutputStream0);
      String[] stringArray0 = new String[5];
      Float float0 = new Float((float) (-2894L));
      URL uRL0 = MockURL.getHttpExample();
      HomeURLContent homeURLContent0 = new HomeURLContent(uRL0);
      Sash[] sashArray0 = new Sash[0];
      float[][] floatArray0 = new float[4][9];
      Long long0 = new Long((-2894L));
      BigDecimal bigDecimal0 = new BigDecimal(967L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("hj#", "hj#", "ELEVATION", "hPNBKsgR&r=wv/FH)Z", stringArray0, (Long) null, float0, homeURLContent0, homeURLContent0, homeURLContent0, (-1527.138F), 0.0F, 0.0F, 61.218056F, (-40.0F), true, "ELEVATION", 1987.9762F, (-2894L), false, true, sashArray0, floatArray0, false, long0, "hj#", true, false, false, bigDecimal0, bigDecimal0, "2)");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeChildren(xMLWriter0, homeDoorOrWindow0);
      assertEquals("2)", homeDoorOrWindow0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockFile mockFile0 = new MockFile("?Ti$=zNJkK=");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(1, 124.2008F, 0.0F, (-58), (Float) null);
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[6];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = new BigDecimal(1576L);
      CatalogLight catalogLight0 = new CatalogLight("", "", " ?%FeJ\u0000:^H", (Content) null, (Content) null, (Content) null, 1, 7000L, 7000L, 0.0F, false, lightSourceArray0, floatArray0, " ?%FeJ\u0000:^H", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeChildren(xMLWriter0, homeLight0);
      assertEquals(7000.0F, homeLight0.getDepthInPlan(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      MockFile mockFile0 = new MockFile("leftSideBaseboard");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      HomeURLContent homeURLContent0 = new HomeURLContent((URL) null);
      Integer integer0 = new Integer(5);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("%=+qQal", homeURLContent0, homeURLContent0, (-3116.0F), (-3709.5596F), (-3116.0F), 1626.0F, false, integer0, (float[][]) null, false, (-171.73334F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeChildren(xMLWriter0, homePieceOfFurniture0);
      assertTrue(homePieceOfFurniture0.isModelCenteredAtOrigin());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      HomeXMLExporter.PieceOfFurnitureExporter homeXMLExporter_PieceOfFurnitureExporter0 = homeXMLExporter0.new PieceOfFurnitureExporter();
      MockFile mockFile0 = new MockFile("leftSideBaseboard");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      HomeURLContent homeURLContent0 = new HomeURLContent((URL) null);
      Integer integer0 = new Integer(5);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("%=+qQal", homeURLContent0, homeURLContent0, (-3116.0F), (-3709.5596F), (-3116.0F), 1626.0F, false, integer0, (float[][]) null, false, (-171.73334F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float float0 = new Float((-3116.0F));
      homePieceOfFurniture0.setShininess(float0);
      homeXMLExporter_PieceOfFurnitureExporter0.writeAttributes(xMLWriter0, homePieceOfFurniture0);
      assertEquals(1626.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockFile mockFile0 = new MockFile("OPEN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      Home home0 = new Home();
      Label label0 = new Label("Etc/GMT-13", 1.0F, 101.7F);
      home0.addLabel(label0);
      homeXMLExporter0.writeChildren(xMLWriter0, home0);
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("@asilc8Rz6# uzLzu", true);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      TextStyle textStyle0 = new TextStyle((-210.0F));
      homeXMLExporter0.writeTextStyle(xMLWriter0, textStyle0, "Can't set back face shown attribute of a group");
      assertFalse(textStyle0.isItalic());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 231);
      XMLWriter xMLWriter0 = new XMLWriter(bufferedOutputStream0);
      Integer integer0 = new Integer(231);
      Baseboard baseboard0 = new Baseboard(0.0F, 231, integer0, (HomeTexture) null);
      homeXMLExporter0.writeBaseboard(xMLWriter0, baseboard0, "Asia/Tel_Aviv");
      assertEquals(0.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HomeXMLExporter homeXMLExporter0 = new HomeXMLExporter();
      MockPrintStream mockPrintStream0 = new MockPrintStream("level");
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      URL uRL0 = MockURL.getHttpExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("UqE:UkHWr0Vv^", simpleURLContent0, 1613.3105F, 1613.3105F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 1613.3105F, 1613.3105F, true);
      homeXMLExporter0.writeTexture(xMLWriter0, homeTexture0, "9Ik[CDz");
      assertEquals(1613.3105F, homeTexture0.getWidth(), 0.01F);
  }
}
