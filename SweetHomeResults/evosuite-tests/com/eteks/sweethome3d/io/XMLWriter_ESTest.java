/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:19:43 GMT 2022
 */

package com.eteks.sweethome3d.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.io.XMLWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLWriter_ESTest extends XMLWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      xMLWriter0.writeBigDecimalAttribute("", bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("a 3Fpo9lIv7uGUXC.V1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeBigDecimalAttribute("", (BigDecimal) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      Long long0 = new Long((-1L));
      xMLWriter0.writeLongAttribute("A;dcWVIc]tZku;", long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("me.579=? X1%\"g_,p");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeLongAttribute("", (Long) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeStartElement("&lt;");
      xMLWriter0.write(540);
      xMLWriter0.writeStartElement("&lt;");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      Integer integer0 = new Integer(540);
      xMLWriter0.writeColorAttribute("&quot;", integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      xMLWriter0.writeColorAttribute(">", (Integer) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("hqWZ");
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeBooleanAttribute((String) null, true, false);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      xMLWriter0.writeBooleanAttribute("1k}F%V*li9a6", false, false);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2933);
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      xMLWriter0.writeFloatAttribute("N_$I)Dx+V\u0007", (float) 2933, 3737.06F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      xMLWriter0.writeFloatAttribute("1k}F%V*li9a6", 144.73546F, 144.73546F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("2!,s&'qB;dd(+", false);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      Float float0 = new Float(3561.529F);
      xMLWriter0.writeFloatAttribute("2!,s&'qB;dd(+", float0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      File file0 = MockFile.createTempFile("&apos;", "&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeFloatAttribute("%08X", (Float) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeStartElement("&lt;");
      xMLWriter0.writeStartElement("&quot;");
      xMLWriter0.writeEndElement();
      xMLWriter0.writeEndElement();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeStartElement("&lt;");
      xMLWriter0.write(540);
      xMLWriter0.writeEndElement();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("KK~H*XML]l m>4C", "KK~H*XML]l m>4C");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeIntegerAttribute("", 0, (-265));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeIntegerAttribute("", 1901, 1901);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      XMLWriter xMLWriter0 = new XMLWriter(byteArrayOutputStream0);
      xMLWriter0.writeAttribute("&quot;", "&quot;", "&quot;");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      // Undeclared exception!
      try { 
        xMLWriter0.writeAttribute((String) null, (String) null, "='");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("h< {fZ,.7P8|T/7");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeAttribute("h< {fZ,.7P8|T/7", (String) null, (String) null);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("KK~H*XML]l m>4C", "KK~H*XML]l m>4C");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      XMLWriter xMLWriter0 = new XMLWriter(mockPrintStream0);
      xMLWriter0.writeAttribute("", "KK~H*XML]l m>4C", "");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(pipedOutputStream0);
      xMLWriter0.write(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      // Undeclared exception!
      try { 
        xMLWriter0.write("", (-1183), (-1183));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9a");
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      char[] charArray0 = new char[1];
      xMLWriter0.write(charArray0, 0, 0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = MockFile.createTempFile("&apos;", "&");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, false);
      XMLWriter xMLWriter0 = new XMLWriter(mockFileOutputStream0);
      xMLWriter0.writeIntegerAttribute("&", (-620));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      XMLWriter xMLWriter0 = new XMLWriter(dataOutputStream0);
      xMLWriter0.writeLongAttribute("", (long) (-1183));
  }
}
