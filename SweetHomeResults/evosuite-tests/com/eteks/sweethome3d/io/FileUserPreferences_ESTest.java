/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:11:07 GMT 2022
 */

package com.eteks.sweethome3d.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.io.DefaultLibrary;
import com.eteks.sweethome3d.io.FileUserPreferences;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.Library;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.PropertyResourceBundle;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.prefs.Preferences;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.prefs.MockPreferences;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileUserPreferences_ESTest extends FileUserPreferences_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          File file0 = fileUserPreferences0.getApplicationFolder();
          MockFile.createTempFile("Furniture-3-j^{e~KM=iVUiKP`S0", "Furniture-3-j^{e~KM=iVUiKP`S0", file0);
          fileUserPreferences0.write();
          fileUserPreferences0.languageLibraryExists("q9\"(T*XRLoZ{q2efp");
          try { 
            fileUserPreferences0.addTexturesLibrary("Furniture library");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write Furniture library in textures libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("j^{e~KM=iVUiKP`S");
          mockFile0.setLastModified(600000L);
          MockFile.createTempFile("j^{e~KM=iVUiKP`S", "", (File) mockFile0);
          File[] fileArray0 = new File[0];
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences(mockFile0, fileArray0);
          fileUserPreferences0.write();
          String string0 = "3C-~0C^";
          try { 
            fileUserPreferences0.addFurnitureLibrary(string0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't access to furniture libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          LinkedList<Library> linkedList0 = new LinkedList<Library>();
          Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
          doReturn(false).when(enumeration0).hasMoreElements();
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
          PropertyResourceBundle propertyResourceBundle0 = new PropertyResourceBundle(pushbackInputStream0);
          DefaultLibrary defaultLibrary0 = new DefaultLibrary("Texture-3-furniture", "Furniture library", propertyResourceBundle0);
          linkedList0.add((Library) defaultLibrary0);
          try { 
            fileUserPreferences0.deleteLibraries(linkedList0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Couldn't delete file Texture-3-furniture
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          List<Library> list0 = fileUserPreferences0.getLibraries();
          fileUserPreferences0.write();
          FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
          fileUserPreferences0.deleteLibraries(list0);
          int int0 = (-200);
          String string0 = "RESIZABLE";
          try { 
            fileUserPreferences0.addFurnitureLibrary(string0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write RESIZABLE in furniture libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File[] fileArray0 = new File[0];
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences((File) null, fileArray0);
          fileUserPreferences0.getFurnitureLibrariesPluginFolders();
          try { 
            fileUserPreferences0.getApplicationFolder();
            fail("Expecting exception: IOException");
          
          } catch(IOException e) {
             //
             // No application folder defined
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "7V|oj$4)_u";
      MockFile mockFile0 = new MockFile("7V|oj$4)_u");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      File[] fileArray0 = new File[0];
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences(mockFile0, fileArray0);
      fileUserPreferences0.getRecentTextures();
      String string1 = "P);a[\"q%";
      try { 
        fileUserPreferences0.addLanguageLibrary("P);a[\"q%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't access to language libraries plugin folder
         //
         verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.languageLibraryExists("");
          fileUserPreferences0.getResourceClassLoaders();
          try { 
            fileUserPreferences0.addLanguageLibrary("$JCpo");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write $JCpo in language libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
          File file0 = null;
          File[] fileArray0 = new File[0];
          TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
          ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
          ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1221, threadPoolExecutor_DiscardPolicy0);
          BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
          ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
          ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1221, 1221, 1221, timeUnit0, blockingQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences((File) null, fileArray0, threadPoolExecutor0);
          String string0 = "languages";
          try { 
            fileUserPreferences0.furnitureLibraryExists("languages");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't access to furniture libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.getFurnitureLibrariesPluginFolders();
          fileUserPreferences0.texturesLibraryExists("MU[C");
          fileUserPreferences0.setObserverCameraSelectedAtChange(true);
          fileUserPreferences0.setActionTipIgnored("MU[C");
          fileUserPreferences0.languageLibraryExists("_@o +Fs|52Zv&[");
          boolean boolean0 = fileUserPreferences0.isActionTipIgnored("MU[C");
          assertTrue(boolean0);
          
          boolean boolean1 = fileUserPreferences0.languageLibraryExists("rc");
          assertFalse(boolean1 == boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.setNavigationPanelVisible(true);
          fileUserPreferences0.setCheckUpdatesEnabled(false);
          fileUserPreferences0.setLanguage("$JCpo");
          fileUserPreferences0.languageLibraryExists("");
          fileUserPreferences0.getResourceClassLoaders();
          List<Library> list0 = fileUserPreferences0.getLibraries();
          assertEquals(0, list0.size());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          MockFile mockFile0 = new MockFile("Nc&", "");
          File[] fileArray0 = new File[4];
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences(mockFile0, fileArray0);
          fileUserPreferences0.addAutoCompletionString("", "");
          fileUserPreferences0.setActionTipIgnored((String) null);
          // Undeclared exception!
          try { 
            fileUserPreferences0.write();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("java.util.prefs.AbstractPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.getApplicationSubfolders("rc");
          fileUserPreferences0.getFurnitureLibrariesPluginFolders();
          Long long0 = new Long(0L);
          fileUserPreferences0.setUpdatesMinimumDate(long0);
          fileUserPreferences0.isActionTipIgnored("MU[C");
          fileUserPreferences0.languageLibraryExists("rc");
          fileUserPreferences0.write();
          assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.resetIgnoredActionTips();
          fileUserPreferences0.getLibraries();
          Integer integer0 = Integer.valueOf((-1));
          fileUserPreferences0.setNewRoomFloorColor(integer0);
          fileUserPreferences0.write();
          try { 
            fileUserPreferences0.addTexturesLibrary("B");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write B in textures libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          String string0 = "languages";
          fileUserPreferences0.setDefaultFontName("languages");
          fileUserPreferences0.getLibraries();
          fileUserPreferences0.write();
          fileUserPreferences0.languageLibraryExists(fileUserPreferences0.FURNITURE_LIBRARY_TYPE);
          String string1 = "RESIZABLE";
          try { 
            fileUserPreferences0.addFurnitureLibrary(string1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write RESIZABLE in furniture libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
          fileUserPreferences0.setUnit(lengthUnit0);
          fileUserPreferences0.setDefaultValueAddedTaxPercentage((BigDecimal) null);
          fileUserPreferences0.write();
          fileUserPreferences0.getApplicationSubfolders("Ib7cRT9_#VXxHt!W");
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          boolean boolean0 = fileUserPreferences0.furnitureLibraryExists("Can't close files");
          assertFalse(boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
          FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Texture-3-languages");
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          String string0 = ")Ua";
          fileUserPreferences0.furnitureLibraryExists(")Ua");
          fileUserPreferences0.setCurrency(")Ua");
          fileUserPreferences0.write();
          String string1 = "*Z4 ";
          String string2 = "2Q+`g0";
          String string3 = "DqUL+.'pIi~`Hz561_";
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          FileSystemHandling.shouldAllThrowIOExceptions();
          fileUserPreferences0.getPreferences();
          fileUserPreferences0.getResourceClassLoaders();
          try { 
            fileUserPreferences0.write();
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Couldn't write preferences
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.getFurnitureLibrariesPluginFolders();
          Class<FileUserPreferences> class0 = FileUserPreferences.class;
          Preferences preferences0 = MockPreferences.systemNodeForPackage(class0);
          fileUserPreferences0.texturesLibraryExists("MU[C");
          fileUserPreferences0.languageLibraryExists("_@o +Fs|52Zv&[");
          fileUserPreferences0.languageLibraryExists("rc");
          FurnitureCategory furnitureCategory0 = fileUserPreferences0.readModifiableFurnitureCategory(preferences0, (-1816));
          assertEquals("", furnitureCategory0.getName());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          Preferences preferences0 = fileUserPreferences0.getPreferences();
          fileUserPreferences0.getResourceClassLoaders();
          fileUserPreferences0.getLibraries();
          fileUserPreferences0.getApplicationFolder();
          fileUserPreferences0.readModifiableTextureCategory(preferences0, 0);
          fileUserPreferences0.write();
          fileUserPreferences0.setActionTipIgnored("B");
          try { 
            fileUserPreferences0.addTexturesLibrary("B");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write B in textures libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          DefaultLibrary defaultLibrary0 = new DefaultLibrary(" in textures libraries plugin folder", "Furniture library", "PluginLanguageLibrary", "Furniture library", "", "~v[K", "Furniture library", "");
          fileUserPreferences0.write();
          fileUserPreferences0.furnitureLibraryExists("]D");
          boolean boolean0 = fileUserPreferences0.isLibraryDeletable(defaultLibrary0);
          fileUserPreferences0.furnitureLibraryExists("2#1/BYB7VeV2mqK_pO");
          fileUserPreferences0.getFurnitureLibrariesPluginFolders();
          boolean boolean1 = fileUserPreferences0.isActionTipIgnored("2#1/BYB7VeV2mqK_pO");
          assertTrue(boolean1 == boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.getApplicationFolder();
          fileUserPreferences0.write();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\Petros\\eTeks\\Sweet Home 3D\\languages\\RLoZ{q2efp");
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.appendStringToFile(evoSuiteFile0, "Language library");
          FileUserPreferences fileUserPreferences1 = new FileUserPreferences();
          MockPreferences.userRoot();
          fileUserPreferences0.languageLibraryExists(fileUserPreferences0.FURNITURE_LIBRARY_TYPE);
          try { 
            fileUserPreferences1.addFurnitureLibrary(fileUserPreferences1.LANGUAGE_LIBRARY_TYPE);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't write Language library in furniture libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          fileUserPreferences0.getApplicationFolder();
          fileUserPreferences0.write();
          FileUserPreferences fileUserPreferences1 = new FileUserPreferences();
          fileUserPreferences0.languageLibraryExists("q9\"(T*XRLoZ{q2efp");
          fileUserPreferences0.write();
          assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\Petros\\eTeks\\Sweet Home 3D\\preferences.xml");
          FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
          try { 
            fileUserPreferences0.write();
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Couldn't write preferences
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("C:\\Users\\Petros\\eTeks\\Sweet Home 3D\\languages\\RLoZ{q2efp");
          boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "Language library");
          FileUserPreferences fileUserPreferences1 = new FileUserPreferences();
          fileUserPreferences0.write();
          MockPreferences.userRoot();
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          boolean boolean1 = fileUserPreferences0.languageLibraryExists("q9\"(T*XHRLoZ{q2efp");
          assertFalse(boolean1 == boolean0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          File[] fileArray0 = new File[0];
          TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
          ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
          ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1221, threadPoolExecutor_DiscardPolicy0);
          BlockingQueue<Runnable> blockingQueue0 = scheduledThreadPoolExecutor0.getQueue();
          ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
          ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(1221, 1221, 1221, timeUnit0, blockingQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
          FileUserPreferences fileUserPreferences0 = new FileUserPreferences((File) null, fileArray0, threadPoolExecutor0);
          try { 
            fileUserPreferences0.texturesLibraryExists(fileUserPreferences0.FURNITURE_LIBRARY_TYPE);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Can't access to textures libraries plugin folder
             //
             verifyException("com.eteks.sweethome3d.io.FileUserPreferences", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
