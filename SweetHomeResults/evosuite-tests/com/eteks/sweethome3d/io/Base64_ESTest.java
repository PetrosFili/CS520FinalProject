/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 02:59:20 GMT 2022
 */

package com.eteks.sweethome3d.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.io.Base64;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64_ESTest extends Base64_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("IQCVAACVlQYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAA", (int) (byte) (-107));
      assertEquals(66, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode("j", (-1012));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64-encoded string must have at least four characters, but length specified was 1
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)0, 4);
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        Base64.decode("vku.Ao$t;", 47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Bad Base64 input character decimal 46 in array position 3
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte)45);
      assertEquals("---------------------------------------------------------------------------=", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[66];
      String string0 = Base64.encodeBytes(byteArray0, (int) (byte) (-99));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nAAAAAAAAAAAA", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
      String string0 = Base64.encodeBytes(byteArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, 30, 2370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have offset of 30 and length of 2370 with array of length 1
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte)0, (int) (byte) (-39));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have length offset: -39
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        Base64.encodeBytes(byteArray0, (int) (byte) (-70), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative offset: -70
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.encodeBytes((byte[]) null, 0, 0, 1811);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot serialize a null array.
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("AAC0r8w=");
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-76), (byte) (-81), (byte) (-52)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("AAAAAA==", 4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("H4sIAAAAAAAAAHu5KxsA38w4nQMAAAA=");
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Base64.decode((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Input string was null.
         //
         verifyException("com.eteks.sweethome3d.io.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("", 23);
      String string0 = Base64.encodeBytes(byteArray0, 23);
      assertEquals("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = Base64.decode("");
      String string0 = Base64.encodeBytes(byteArray0, (-1));
      assertEquals("H4sIAAAAAAAAAAMAAAAAAAAAAAA=", string0);
  }
}
