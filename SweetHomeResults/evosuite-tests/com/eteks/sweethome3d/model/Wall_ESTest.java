/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 04:01:21 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Baseboard;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.SimpleURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-326.8436F));
      CatalogTexture catalogTexture0 = new CatalogTexture("~USt+@f@-", (Content) null, 0.0F, (-1.0F));
      wall0.setPattern(catalogTexture0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-326.8436F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Wall wall0 = new Wall("k}.5<PzMX<&;", 0.0F, (-876.9F), (-876.9F), 0.0F, (-876.9F), (-1369.0F));
      wall0.setPattern((TextureImage) null);
      assertEquals((-876.9F), wall0.getThickness(), 0.01F);
      assertEquals((-876.9F), wall0.getYStart(), 0.01F);
      assertEquals((-1369.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-876.9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 366.6209F, 414.05716F);
      Integer integer0 = new Integer((-1849));
      wall0.setLeftSideColor(integer0);
      Integer integer1 = new Integer((-1849));
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(365.6209F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(414.05716F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1031.5F), 0.0F, 0.0F, 0.0F);
      Integer integer0 = new Integer((-1602));
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1031.5F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      boolean boolean0 = wall0.containsPoint(0.0F, 1.0F, (float) 8);
      boolean boolean1 = wall0.containsWallEndAt(1.0F, 0.0F, (-1744.748F));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("D)km_8qU", temporaryURLContent0, (-2399), (-386.88217F), false);
      Wall wall0 = new Wall("", (-198.3F), (-198.3F), 1497.85F, 1339.6F, 0.0F, 1339.6F, catalogTexture0);
      Integer integer0 = new Integer((-2399));
      Baseboard baseboard0 = Baseboard.getInstance(216.2F, (-939.8486F), integer0, (HomeTexture) null);
      wall0.setLeftSideBaseboard(baseboard0);
      wall0.getPoints(true);
      wall0.getPoints(true);
      assertEquals(2289.5547F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1339.6F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 1156.4F, 1156.4F, 0.0F);
      Float float0 = new Float((double) 1156.4F);
      wall0.setHeight(float0);
      assertEquals(1156.4F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Wall wall0 = new Wall("_kO^8bWuow)?Ous&QH", 0.0F, 0.0F, 0.0F, 0.0F, (-2842.0054F), (-2842.0054F));
      assertEquals((-2842.0054F), wall0.getHeight(), 0.01F);
      
      Float float0 = new Float((-2842.0054F));
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2842.0054F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Wall wall0 = new Wall(4000.0F, 4000.0F, 4000.0F, 4000.0F, 0.0F, 4000.0F);
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      float float1 = wall0.getLength();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4000.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, (TextureImage) null);
      float float0 = wall0.getLength();
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Wall wall0 = new Wall(2843.6174F, 0.0F, (-1661.0F), 0.0F, 0.0F);
      boolean boolean0 = wall0.containsPoint((-1661.0F), 0.0F, false, 1.0F);
      boolean boolean1 = wall0.intersectsRectangle(0.01F, (-1661.0F), 0.0F, 2843.6174F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Wall wall0 = new Wall("k}.5<PzMX<&;", 0.0F, (-876.9F), (-876.9F), 0.0F, (-876.9F), (-1369.0F));
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-438.45F), float0, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-876.9F), wall0.getThickness(), 0.01F);
      assertEquals((-1369.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-876.9F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Wall wall0 = new Wall(196.007F, 884.161F, 441.0F, 196.007F, 196.007F);
      Float float0 = new Float((-2092.0625));
      wall0.setArcExtent(float0);
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(196.007F, wall0.getThickness(), 0.01F);
      assertEquals(1563.7026F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("D)km_8qU", temporaryURLContent0, (-2399), (-388.57F), false);
      Wall wall0 = new Wall("", (-198.3F), (-198.3F), 1497.85F, 1339.6F, 0.0F, 1339.6F, catalogTexture0);
      Wall wall1 = new Wall(0.0F, (-198.3F), 0.0F, (-439.6521F), (-143.27995F));
      wall0.setWallAtEnd(wall1);
      wall0.getPoints(true);
      assertEquals(1339.6F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2289.5547F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.containsPoint(0.0F, 1.0F, (float) 8);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.01F, 2387.0F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.6829774F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setYEnd(0.6829774F);
      wall0.containsPoint(0.0F, 1.0F, (float) 8);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.1F, 2387.0F);
      assertEquals(0.31702262F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.containsPoint(0.0F, 1.0F, (float) 8);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.1F, 2387.0F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.0F, 0.0F, (-45.9558F), 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      boolean boolean0 = wall0.containsWallStartAt(0.01F, (-89.0F), 1.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.0F, 2387.0F);
      boolean boolean1 = wall0.containsWallEndAt(1.0F, 0.0F, (-1744.748F));
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(0.0F, 0.0F, 898.5F, 0.0F, 898.5F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.1F, 2424.7356F);
      assertTrue(boolean0);
      
      wall0.containsWallEndAt(0.0F, 0.0F, (-1744.748F));
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(898.5F, 0.0F, 1.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.1F, 2387.0F);
      assertTrue(boolean0);
      
      wall0.containsWallEndAt(0.0F, 0.0F, (-1744.748F));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, (TextureImage) null);
      Wall wall1 = new Wall(898.5F, 0.0F, 1.0F, 0.0F, 0.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall0.containsWallEndAt(0.0F, 0.0F, (-1744.748F));
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.1F, 0.1F, (-45.9558F), 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt(0.01F, (-89.0F), 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.9055385F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.1F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.containsWallStartAt((-750.3135F), 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Wall wall0 = new Wall("&nKmv#[g4", 1840.225F, 0.0F, 0.0F, (-1164.263F), 1840.225F, 0.0F);
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1840.225F, wall0.getXStart(), 0.01F);
      assertEquals(1840.225F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1164.263F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      Float float0 = new Float((-1309.0F));
      wall0.setHeightAtEnd(float0);
      boolean boolean0 = wall0.isTrapezoidal();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setHeight((Float) null);
      wall0.isTrapezoidal();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("\"=2PTYVfUZ-P", resourceURLContent0, 3670.103F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 0.0F);
      HomeTexture homeTexture1 = new HomeTexture(catalogTexture0, 0.0F);
      wall0.setRightSideTexture(homeTexture0);
      wall0.setRightSideTexture(homeTexture1);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Wall wall0 = new Wall(4003.9822F, 4003.9822F, 4003.9822F, 0.0F, 0.0F, 4003.9822F);
      CatalogTexture catalogTexture0 = new CatalogTexture("jwy3' ", "", (Content) null, 4003.9822F, 1709.0F, "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, (-4186.016F), (-4186.016F), true);
      wall0.setRightSideTexture(homeTexture0);
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(4003.9822F, wall0.getHeight(), 0.01F);
      assertEquals(4003.9822F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4003.9822F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      Float float0 = new Float(1596.4531F);
      wall0.setArcExtent(float0);
      float float1 = wall0.getLength();
      assertEquals(6961485.0F, float1, 0.01F);
      
      wall0.isMiddlePointAt((-699.3536F), 693.0F, (-19.074951F));
      assertEquals(1596.4531F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.1F, 0.1F, (-45.9558F), 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.move(46.95622F, 0.0F);
      wall0.containsWallStartAt((-751.0F), 0.0F, 0.0F);
      assertEquals(47.056217F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Wall wall0 = new Wall(46.95622F, (-1.0F), 2.0F, 2.0F, (-45.9558F), 46.95622F);
      Wall wall1 = new Wall((-89.0F), 2.0F, 46.95622F, (-751.0F), 0.0F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      boolean boolean0 = wall0.containsPoint((-1.0F), 2.0F, 0.0F);
      assertEquals(45.056206F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.1F, 0.1F, (-45.9558F), 0.0F);
      Wall wall1 = new Wall("v", (-89.0F), 0.0F, 0.0F, 0.0F, (-835.58F), (-45.9558F), (TextureImage) null);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      assertEquals(0.9055385F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.containsWallStartAt(0.01F, (-89.0F), 0.0F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-45.9558F), wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("D)km_8qU", temporaryURLContent0, (-2399), (-388.57F), false);
      Wall wall0 = new Wall("", (-198.3F), (-198.3F), 1497.85F, 1339.6F, 0.0F, 1339.6F, catalogTexture0);
      wall0.setWallAtEnd(wall0);
      Integer integer0 = new Integer((-2399));
      Baseboard baseboard0 = Baseboard.getInstance(216.2F, (-939.8486F), integer0, (HomeTexture) null);
      wall0.setLeftSideBaseboard(baseboard0);
      wall0.getPoints(true);
      assertEquals(2289.5547F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1339.6F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1.0F, 0.0F, 0.0F, (-45.9558F), 0.0F);
      Wall wall1 = new Wall("v", (-89.0F), 0.0F, 0.0F, 0.0F, (-835.58F), (-45.9558F), (TextureImage) null);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.containsWallStartAt(0.01F, (-89.0F), 0.0F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-89.0F), wall1.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(898.5F, 0.0F, 1.0F, 0.0F, 1.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setXStart(1.0F);
      wall1.setYEnd(1.0F);
      boolean boolean0 = wall1.containsPoint(0.01F, 0.1F, 2387.0F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.1F, 0.0F, 0.0F);
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Wall wall0 = new Wall("com.eteks.sweethome3d.model.CatalogTexture", (-1883.8912F), (-1.0F), (-1.0F), (-1883.8912F), (-1883.8912F), (-1.0F));
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-1883.8912F), wall0.getThickness(), 0.01F);
      assertEquals(2662.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.5374974E19F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, 2.0F, (-330.7546F));
      wall0.setWallAtStart((Wall) null);
      assertEquals((-330.7546F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("\"=2PTYVfUZ-P", resourceURLContent0, 3670.103F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 0.0F);
      HomeTexture homeTexture1 = new HomeTexture(catalogTexture0, 0.0F);
      wall0.setLeftSideTexture(homeTexture1);
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent((URL) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", simpleURLContent0, 0.0077846893F, (-149.77F), "", true);
      Wall wall0 = new Wall((-587.317F), (-149.77F), (-149.77F), (-587.317F), 1385.58F, 1385.58F, catalogTexture0);
      linkedList0.offerFirst(wall0);
      assertEquals(1385.58F, wall0.getThickness(), 0.01F);
      assertEquals(1385.58F, wall0.getHeight(), 0.01F);
      assertEquals(618.7849F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      Integer integer0 = new Integer((-3898));
      Integer integer1 = new Integer((-3898));
      wall0.setRightSideColor(integer1);
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Wall wall0 = new Wall(488.2975F, 488.2975F, 488.2975F, 0.0F, 0.0F);
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
      wall0.setRightSideColor((Integer) null);
      assertEquals(488.2975F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(488.2975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Wall wall0 = new Wall("", (-2490.2505F), (-2490.2505F), (-2490.2505F), (-2490.2505F), 819.0207F, 819.0207F);
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(819.0207F, wall0.getThickness(), 0.01F);
      assertEquals(819.0207F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Wall wall0 = new Wall("}", (-2083.0754F), (-2083.0754F), 0.0F, (-2083.0754F), (-2083.0754F), 1.0F);
      wall0.setLeftSideShininess(1.0F);
      assertEquals(1.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 1156.4F, 1156.4F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      assertEquals(1635.3824F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 366.6209F, 414.05716F);
      wall0.setYStart((-653.2682F));
      assertEquals((-653.2682F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      wall0.setRightSideShininess(4000.0F);
      assertEquals(4000.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Wall wall0 = new Wall((-1735.29F), 0.0F, 0.1F, 0.0F, 0.0F, 4118.503F);
      wall0.setThickness((-1735.29F));
      assertEquals((-1735.29F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Wall wall0 = new Wall("", (-539.2754F), (-539.2754F), 1104.29F, 0.0F, 0.0F, 670.665F);
      wall0.setThickness(0.0F);
      assertEquals(1729.7761F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-539.2754F), wall0.getYStart(), 0.01F);
      assertEquals(670.665F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("Y7%iI#[X", "Y7%iI#[X", simpleURLContent0, 37.943F, 0.0F, "'");
      Wall wall0 = new Wall(445.676F, 445.676F, 37.943F, 37.943F, 37.943F, 37.943F, catalogTexture0);
      Integer integer0 = new Integer(0);
      wall0.setTopColor(integer0);
      Integer integer1 = new Integer(0);
      wall0.setTopColor(integer1);
      assertEquals(37.943F, wall0.getThickness(), 0.01F);
      assertEquals(37.943F, wall0.getHeight(), 0.01F);
      assertEquals(576.6215F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 366.6209F, 414.05716F);
      Integer integer0 = new Integer((-1849));
      wall0.setTopColor(integer0);
      wall0.setTopColor((Integer) null);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(414.05716F, wall0.getThickness(), 0.01F);
      assertEquals(365.6209F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("D)km_8qU", temporaryURLContent0, (-2399), (-388.57F), false);
      Wall wall0 = new Wall("", (-198.3F), (-198.3F), 1497.85F, 1339.6F, 0.0F, 1339.6F, catalogTexture0);
      Integer integer0 = new Integer((-2399));
      Baseboard baseboard0 = Baseboard.getInstance(216.2F, (-939.8486F), integer0, (HomeTexture) null);
      wall0.setLeftSideBaseboard(baseboard0);
      wall0.setLeftSideBaseboard((Baseboard) null);
      assertEquals(1339.6F, wall0.getHeight(), 0.01F);
      assertEquals(2289.5547F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      wall0.setLeftSideBaseboard((Baseboard) null);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Wall wall0 = new Wall("", 1448.7628F, 1448.7628F, 1448.7628F, 0.0F, 1448.7628F, 1448.7628F);
      Integer integer0 = new Integer(0);
      Baseboard baseboard0 = Baseboard.getInstance(0, 1448.7628F, integer0, (HomeTexture) null);
      wall0.setRightSideBaseboard(baseboard0);
      wall0.getPoints(true);
      assertEquals(1448.7628F, wall0.getHeight(), 0.01F);
      assertEquals(1448.7628F, wall0.getThickness(), 0.01F);
      assertEquals(1448.7628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1448.7628F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Wall wall0 = new Wall((-571.46F), 4100.0F, (-571.46F), 4100.0F, 4100.0F);
      Float float0 = new Float((-899.0594101));
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(0.6823847F, (-571.46F), (-1309.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Wall wall0 = new Wall("com.eteks.sweethome3d.model.CatalogTexture", (-1883.8912F), (-1.0F), (-1.0F), (-1883.8912F), (-1883.8912F), (-1.0F));
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-1883.8912F), 0.0F, 0.0F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1883.8912F), wall0.getThickness(), 0.01F);
      assertEquals(2662.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Wall wall0 = new Wall(4000.0F, 4000.0F, 4000.0F, 0.0F, 0.0F, 4000.0F);
      Level level0 = new Level("jar", 4000.0F, (-4186.016F), 0.0F);
      Level level1 = new Level("jar", 0.0F, 4000.0F, 0.0F);
      level1.setElevation(439.14148F);
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4000.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4000.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 4000.0F, 0.0F, 4000.0F, 4000.0F);
      Level level0 = new Level("jar", "jar", (-2921), 4000.0F, (-2921));
      Level level1 = level0.clone();
      level1.setElevationIndex((-2921));
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(4000.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Wall wall0 = new Wall(4000.0F, 4000.0F, 4000.0F, 4000.0F, 0.0F, 4000.0F);
      Level level0 = new Level("jar", "jar", (-2921), 4000.0F, (-2921));
      Level level1 = level0.clone();
      wall0.setLevel(level1);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      assertEquals(4000.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Wall wall0 = new Wall(4000.0F, 4000.0F, 4000.0F, 4000.0F, 0.0F, 4000.0F);
      Level level0 = new Level("jar", 4000.0F, (-4186.016F), 0.0F);
      Level level1 = new Level("jar", 0.0F, 4000.0F, 0.0F);
      wall0.setLevel(level1);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4000.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Wall wall0 = new Wall("", 1448.7628F, 1448.7628F, 1448.7628F, 0.0F, 1448.7628F, 1448.7628F);
      Level level0 = new Level("Z-|P", "X_'END", 0.0F, (-143.66F), 1448.7628F);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(1448.7628F, wall0.getThickness(), 0.01F);
      assertEquals(1448.7628F, wall0.getHeight(), 0.01F);
      assertEquals(1448.7628F, wall0.getYStart(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1448.7628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(2259.14F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1596.4531F, wall0.getThickness(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Wall wall0 = new Wall(4000.0F, 4000.0F, 4000.0F, 4000.0F, 0.0F, 4000.0F);
      Level level0 = new Level("jar", 0.0F, 4000.0F, 0.0F);
      wall0.setLevel(level0);
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals(4000.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 1448.7628F, 1448.7628F);
      Integer integer0 = Integer.getInteger("yqt+");
      Baseboard baseboard0 = Baseboard.getInstance(0, 1448.7628F, integer0, (HomeTexture) null);
      wall0.setRightSideBaseboard(baseboard0);
      wall0.setRightSideBaseboard((Baseboard) null);
      assertEquals(1448.7628F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1448.7628F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      wall0.setRightSideBaseboard((Baseboard) null);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1596.4531F, wall0.getThickness(), 0.01F);
      assertEquals(2259.14F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      wall0.isMiddlePointAt((-699.3536F), 693.0F, (-19.074951F));
      assertEquals(2259.14F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1596.4531F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      List<Wall> list0 = Wall.duplicate((List<Wall>) linkedList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      Wall wall1 = new Wall(0.0F, 0.0F, 2120.6355F, 709.4876F, 0.0F, (-432.9374F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall0);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      Wall wall1 = new Wall(0.0F, 0.0F, 2120.6355F, 709.4876F, 0.0F, (-432.9374F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall0);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      Wall wall1 = new Wall(0.0F, 0.0F, 2120.6355F, 709.4876F, 0.0F, (-432.9374F));
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall0);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
      assertEquals(82.31F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-82.31F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Wall wall0 = new Wall("", 1222, 1222, 1222, (-1738.0F), 0.01F, 1222);
      Float float0 = new Float((float) 1222);
      wall0.setArcExtent(float0);
      Float float1 = wall0.getHeight();
      assertEquals(1222.0F, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(2960.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Wall wall0 = new Wall(709.4876F, 4100.0F, (-1309.0F), 2643.0F, (-1309.0F), (-571.46F));
      Float float0 = new Float((-899.0594101));
      wall0.setArcExtent(float0);
      wall0.setArcExtent((Float) null);
      assertEquals((-571.46F), wall0.getHeight(), 0.01F);
      assertEquals(2489.4058F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1309.0F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1.0F), (-1.0F), 0.0F, 0.0F, 697.6627F);
      wall0.move(0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(697.6627F, wall0.getHeight(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Wall wall0 = new Wall((-82.31F), (-82.31F), (-82.31F), 0.0F, (-82.31F));
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("\"=2PTYVfUZ-P", resourceURLContent0, 3670.103F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 0.0F);
      Wall wall1 = new Wall((-1376.1334F), 2120.6355F, (-3898), 0.0F, (-3898), 0.0F, homeTexture0);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(4000.0);
      wall1.setArcExtent(float0);
      wall0.getPoints(true);
      assertEquals((-82.31F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1596.4531F, 1596.4531F, (-1.0F), 1596.4531F, (-1.0F));
      Float float0 = new Float(1596.4531F);
      wall0.setHeightAtEnd(float0);
      Float float1 = new Float(1596.4531F);
      wall0.setHeightAtEnd(float1);
      assertTrue(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      assertTrue(wall0.isTrapezoidal());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("76S5&3|RMCvp2", "76S5&3|RMCvp2", (Content) null, (-1.0F), (-1.0F), "file", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Wall wall0 = new Wall(611.99F, 611.99F, 611.99F, (-1.0F), 611.99F, (-5077.87F), homeTexture0);
      wall0.getHeightAtEnd();
      assertEquals(612.99F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(611.99F, wall0.getThickness(), 0.01F);
      assertEquals((-5077.87F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.1F, 0.0F, 0.0F);
      wall0.getRightSideBaseboard();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Wall wall0 = new Wall("", (-539.2754F), (-539.2754F), 1104.29F, 0.0F, 0.0F, 670.665F);
      Float float0 = wall0.getHeight();
      assertEquals(670.665F, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-539.2754F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1729.7761F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Wall wall0 = new Wall(2843.6174F, 0.0F, (-1661.0F), 0.0F, 0.0F);
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(4504.617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", simpleURLContent0, 3070.8F, 0.0F, "temp", true);
      Wall wall0 = new Wall(3070.8F, (-703.0F), (-703.0F), 3070.8F, 0.0F, 0.0F, catalogTexture0);
      wall0.getArcExtent();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(5336.959F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Wall wall0 = new Wall(2843.6174F, 0.0F, (-1661.0F), 0.0F, 0.0F);
      wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4504.617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Wall wall0 = new Wall(2843.6174F, 0.0F, (-1661.0F), 0.0F, 0.0F);
      wall0.getPattern();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4504.617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (TextureImage) null);
      wall0.getRightSideColor();
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Wall wall0 = new Wall(630.00476F, 630.00476F, 1417.0F, 1417.0F, 0.0F);
      wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1112.9794F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Wall wall0 = new Wall(2843.6174F, 0.0F, (-1661.0F), 0.0F, 0.0F);
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4504.617F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Wall wall0 = new Wall("k}.5<PzMX<&;", 0.0F, (-876.9F), (-876.9F), 0.0F, (-876.9F), (-1369.0F));
      wall0.getTopColor();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1369.0F), wall0.getHeight(), 0.01F);
      assertEquals((-876.9F), wall0.getYStart(), 0.01F);
      assertEquals((-876.9F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-876.9F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Wall wall0 = new Wall("", (-539.2754F), (-539.2754F), 1104.29F, 0.0F, 0.0F, 670.665F);
      wall0.getLeftSideColor();
      assertEquals((-539.2754F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1729.7761F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(670.665F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Wall wall0 = new Wall("", (-539.2754F), (-539.2754F), 1104.29F, 0.0F, 0.0F, 670.665F);
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals((-539.2754F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1729.7761F, float0, 0.01F);
      assertEquals(670.665F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F, 1.0F, (TextureImage) null);
      wall0.getLevel();
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Wall wall0 = new Wall("com.eteks.sweethome3d.model.HomeObject", (-1883.8912F), (-1883.8912F), 1509.7017F, 0.0F, (-1883.8912F), (-494.272F));
      wall0.getLeftSideBaseboard();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-494.272F), wall0.getHeight(), 0.01F);
      assertEquals((-1883.8912F), wall0.getYStart(), 0.01F);
      assertEquals(3881.4326F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1883.8912F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Wall wall0 = new Wall("", (-2490.2505F), (-2490.2505F), (-2490.2505F), (-2490.2505F), 819.0207F, 819.0207F);
      float float0 = wall0.getThickness();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(819.0207F, float0, 0.01F);
      assertEquals(819.0207F, wall0.getHeight(), 0.01F);
  }
}
