/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:29:45 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Compass;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Compass_ESTest extends Compass_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compass compass0 = new Compass(1344.78F, 1344.78F, 1344.78F);
      compass0.setTimeZone("Pacific/Galapagos");
      float float0 = compass0.getSunAzimuth((-4226L));
      assertEquals("Pacific/Galapagos", compass0.getTimeZone());
      assertEquals(0.45487946F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compass compass0 = new Compass("z~", 1344.78F, (-84.3F), 0.0F);
      compass0.getSunAzimuth(1L);
      float float0 = compass0.getSunAzimuth(1L);
      assertEquals(6.2150254F, float0, 0.01F);
      assertEquals(1344.78F, compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compass compass0 = new Compass(1344.78F, 1344.78F, 1344.78F);
      compass0.setDiameter(0.45487946F);
      assertEquals(0.45487946F, compass0.getDiameter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compass compass0 = new Compass("Super class isn't cloneable", (-979.9282F), 1.0F, 1.0F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
      
      compass0.setDiameter(1.0F);
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals((-979.9282F), compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compass compass0 = new Compass("m(k39/_5>KC", 0.0F, 12.1239F, 12.1239F);
      compass0.move(0.0F, 12.1239F);
      assertEquals(24.2478F, compass0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compass compass0 = new Compass(1344.78F, 1344.78F, 1344.78F);
      compass0.setLongitude((-4226L));
      assertEquals((-4226.0F), compass0.getLongitude(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compass compass0 = new Compass("m(k39/_5>KC", 0.0F, 12.1239F, 12.1239F);
      compass0.setLongitude(0.0F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(12.1239F, compass0.getDiameter(), 0.01F);
      assertEquals(12.1239F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compass compass0 = new Compass("m(k39/_5>KC", 0.0F, 12.1239F, 12.1239F);
      float float0 = compass0.getSunElevation(0L);
      assertEquals((-1.0741601F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compass compass0 = new Compass(1430.89F, 1430.89F, 1430.89F);
      compass0.setLatitude(18.416666F);
      compass0.setLatitude(18.416666F);
      assertEquals(18.416666F, compass0.getLatitude(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compass compass0 = new Compass("m(k39/_5>KC", 0.0F, 12.1239F, 12.1239F);
      assertEquals(12.1239F, compass0.getDiameter(), 0.01F);
      
      compass0.getPoints();
      float[][] floatArray0 = compass0.getPoints();
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(12.1239F, compass0.getY(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compass compass0 = new Compass(1344.78F, 1344.78F, 1344.78F);
      compass0.setNorthDirection(0.45487946F);
      assertEquals(0.45487946F, compass0.getNorthDirection(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compass compass0 = new Compass(0.0F, 0.0F, (-1.0F));
      compass0.setNorthDirection(0.0F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals((-1.0F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compass compass0 = new Compass((-1.0F), (-784.0F), (-1060.9998F));
      compass0.move((-784.0F), 0.0F);
      assertEquals((-785.0F), compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compass compass0 = new Compass(405.74F, 1.0F, 0.0F);
      compass0.containsPoint((-385.0F), 405.74F, 0.0F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(405.74F, compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compass compass0 = new Compass("z~", 1344.78F, (-84.3F), 0.0F);
      compass0.containsPoint(14.6F, 0.0F, 14.6F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(1344.78F, compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compass compass0 = new Compass("", (-1934.0352F), (-1934.0352F), (-1934.0352F));
      Compass compass1 = new Compass("Home", (-1934.0352F), (-1099.4181F), (-1451.9119F));
      assertEquals((-1099.4181F), compass1.getY(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals((-1451.9119F), compass1.getDiameter(), 0.01F);
      assertEquals((-1934.0352F), compass1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compass compass0 = new Compass(895.4293F, (-122.0F), 0.0F);
      // Undeclared exception!
      try { 
        compass0.setTimeZone((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Time zone ID can't be null
         //
         verifyException("com.eteks.sweethome3d.model.Compass", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compass compass0 = new Compass("jDjC&0c", 0.0F, (-655.0621F), (-1602.6F));
      compass0.setTimeZone("GMT");
      assertTrue(compass0.isVisible());
      assertEquals((-1602.6F), compass0.getDiameter(), 0.01F);
      assertEquals((-655.0621F), compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Compass compass0 = new Compass("", 1.0F, (-317.83533F), 1391.77F);
      compass0.setVisible(false);
      assertFalse(compass0.isVisible());
      
      compass0.setVisible(true);
      assertEquals(1391.77F, compass0.getDiameter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Compass compass0 = new Compass("jDjC&0c", 0.0F, (-655.0621F), (-1602.6F));
      assertTrue(compass0.isVisible());
      
      compass0.setVisible(true);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals((-1602.6F), compass0.getDiameter(), 0.01F);
      assertEquals((-655.0621F), compass0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Compass compass0 = new Compass("jDjC&0c", 0.0F, (-655.0621F), (-1602.6F));
      boolean boolean0 = compass0.intersectsRectangle(1.0F, 0.0F, (-655.0621F), (-3846.0F));
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-655.0621F), compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Compass compass0 = new Compass("jDjC&0c", 0.0F, (-655.0621F), (-1602.6F));
      Compass compass1 = compass0.clone();
      assertEquals((-1602.6F), compass1.getDiameter(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals((-655.0621F), compass1.getY(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Compass compass0 = new Compass("jDjC&0c", 0.0F, (-655.0621F), (-1602.6F));
      compass0.getTimeZone();
      assertEquals((-655.0621F), compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals((-1602.6F), compass0.getDiameter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Compass compass0 = new Compass("", 0.0F, 40.8F, 473.15707F);
      float float0 = compass0.getLongitude();
      assertEquals(40.8F, compass0.getY(), 0.01F);
      assertEquals(473.15707F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Compass compass0 = new Compass("", (-1.0F), 1943.0F, 1943.0F);
      boolean boolean0 = compass0.isVisible();
      assertTrue(boolean0);
      assertEquals(1943.0F, compass0.getDiameter(), 0.01F);
      assertEquals(1943.0F, compass0.getY(), 0.01F);
      assertEquals((-1.0F), compass0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Compass compass0 = new Compass("", (-791.0F), 4324.9F, (-791.0F));
      float float0 = compass0.getSunAzimuth((-355L));
      assertEquals(6.248139F, float0, 0.01F);
      
      float float1 = compass0.getSunElevation(105L);
      assertEquals((-1.0741601F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Compass compass0 = new Compass("Super class isn't cloneable", (-979.9282F), 1.0F, 1.0F);
      float float0 = compass0.getLatitude();
      assertEquals(1.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, float0, 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals((-979.9282F), compass0.getX(), 0.01F);
      assertEquals(1.0F, compass0.getDiameter(), 0.01F);
  }
}
