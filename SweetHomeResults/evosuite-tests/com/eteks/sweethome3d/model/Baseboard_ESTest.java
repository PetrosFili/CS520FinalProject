/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:24:15 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.Baseboard;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.SimpleURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Baseboard_ESTest extends Baseboard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0, 0, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 0.0F, 957.34296F, 0, (-3333.087F), false);
      Baseboard baseboard0 = Baseboard.getInstance(1250.0F, 1250.0F, integer0, homeTexture0);
      assertEquals(1250.0F, baseboard0.getThickness(), 0.01F);
      assertEquals(1250.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      CatalogTexture catalogTexture0 = new CatalogTexture("+NeVQ", (Content) null, 0, 0);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 684.9533F, (-1714.29F), true);
      Baseboard baseboard0 = Baseboard.getInstance(0.0F, 0.0F, integer0, homeTexture0);
      assertEquals(0.0F, baseboard0.getThickness(), 0.01F);
      assertEquals(0.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", simpleURLContent0, 0.0F, (-1.0F), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 178.0F, 1390.33F, true);
      Baseboard baseboard0 = Baseboard.getInstance(0.0F, 0.0F, (Integer) null, homeTexture0);
      assertEquals(0.0F, baseboard0.getThickness(), 0.01F);
      assertEquals(0.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Baseboard baseboard0 = Baseboard.getInstance(232.0F, 232.0F, integer0, (HomeTexture) null);
      boolean boolean0 = baseboard0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(232.0F, baseboard0.getThickness(), 0.01F);
      assertEquals(232.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Baseboard baseboard0 = Baseboard.getInstance(232.0F, 232.0F, integer0, (HomeTexture) null);
      baseboard0.hashCode();
      assertEquals(232.0F, baseboard0.getHeight(), 0.01F);
      assertEquals(232.0F, baseboard0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 1.0F, 0.0F, 1.0F, 1.0F, false);
      Baseboard baseboard0 = new Baseboard(0.0F, 1.0F, (Integer) null, homeTexture0);
      baseboard0.hashCode();
      assertEquals(1.0F, baseboard0.getThickness(), 0.01F);
      assertEquals(0.0F, baseboard0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer((-1515));
      Baseboard baseboard0 = Baseboard.getInstance(1902.383F, 1902.383F, integer0, (HomeTexture) null);
      float float0 = baseboard0.getHeight();
      assertEquals(1902.383F, float0, 0.01F);
      assertEquals(1902.383F, baseboard0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      Baseboard baseboard0 = new Baseboard((-2384.376F), 0.0F, integer0, (HomeTexture) null);
      float float0 = baseboard0.getThickness();
      assertEquals((-2384.376F), baseboard0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      CatalogTexture catalogTexture0 = new CatalogTexture("", resourceURLContent0, 0.0F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 1.0F, 0.0F, 1.0F, 1.0F, false);
      Baseboard baseboard0 = new Baseboard(0.0F, 1.0F, (Integer) null, homeTexture0);
      baseboard0.getTexture();
      assertEquals(0.0F, baseboard0.getHeight(), 0.01F);
      assertEquals(1.0F, baseboard0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Integer integer0 = new Integer((-1515));
      Baseboard baseboard0 = Baseboard.getInstance(1902.383F, 1902.383F, integer0, (HomeTexture) null);
      baseboard0.getColor();
      assertEquals(1902.383F, baseboard0.getHeight(), 0.01F);
      assertEquals(1902.383F, baseboard0.getThickness(), 0.01F);
  }
}
