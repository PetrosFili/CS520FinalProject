/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:53:06 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Polyline;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Polyline_ESTest extends Polyline_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.setPoint(0.0F, 0.0F, 0);
      assertFalse(polyline0.isClosedPath());
      assertEquals((-16777216), polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.SOLID;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline("", floatArray0, (-1861.0581F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 0);
      polyline0.setPoint((-1523.2997F), (-1.0F), 0);
      assertEquals(0, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertTrue(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.SOLID;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-2494));
      // Undeclared exception!
      try { 
        polyline0.setPoint(2.0F, 2.0F, 4404);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 4404
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.setPoint(0.0F, 2496.6729F, 0);
      assertEquals((-16777216), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[1][2];
      Polyline polyline0 = new Polyline(floatArray0);
      // Undeclared exception!
      try { 
        polyline0.setPoint(0.0F, 0.0F, (-829));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -829
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 3453.8184F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 3453.8184F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 2);
      float[][] floatArray1 = new float[4][3];
      polyline0.setPoints(floatArray1);
      assertEquals(4, polyline0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[1][0];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 1);
      polyline0.setPoints(floatArray0);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(1, polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      polyline0.setVisibleIn3D(true);
      float float0 = polyline0.getGroundElevation();
      assertTrue(polyline0.isVisibleIn3D());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      Level level0 = new Level("", "com.eteks.sweethome3d.io.HomeURLContent", 8.0F, 1.0F, 8.0F);
      polyline0.setLevel(level0);
      float float0 = polyline0.getGroundElevation();
      assertEquals(8.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.setColor(0);
      assertEquals(0, polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      polyline0.setColor((-419));
      assertEquals((-419), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(584.0761F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      Polyline.CapStyle polyline_CapStyle1 = Polyline.CapStyle.SQUARE;
      polyline0.setCapStyle(polyline_CapStyle1);
      assertEquals(Polyline.CapStyle.SQUARE, polyline0.getCapStyle());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      polyline0.setCapStyle(polyline_CapStyle0);
      assertEquals(4, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertTrue(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      float float0 = polyline0.getLength();
      assertEquals(4, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertTrue(polyline0.isClosedPath());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      polyline0.setVisibleIn3D(false);
      assertTrue(polyline0.isClosedPath());
      assertEquals(4, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DISC;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 4542.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 125);
      polyline0.setVisibleIn3D(true);
      assertTrue(polyline0.isVisibleIn3D());
      
      polyline0.setVisibleIn3D(false);
      assertTrue(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.setLevel((Level) null);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1689.8204F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 0);
      Polyline.JoinStyle polyline_JoinStyle1 = Polyline.JoinStyle.MITER;
      polyline0.setJoinStyle(polyline_JoinStyle1);
      assertEquals(Polyline.JoinStyle.MITER, polyline0.getJoinStyle());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      float[][] floatArray0 = new float[2][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1264));
      polyline0.setJoinStyle(polyline_JoinStyle0);
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-1264), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[1][4];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      Polyline.DashStyle polyline_DashStyle1 = Polyline.DashStyle.DASH_DOT;
      polyline0.setDashStyle(polyline_DashStyle1);
      assertEquals(Polyline.DashStyle.DASH_DOT, polyline0.getDashStyle());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[1][2];
      Polyline polyline0 = new Polyline(floatArray0);
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      polyline0.setDashStyle(polyline_DashStyle0);
      assertEquals(Polyline.DashStyle.CUSTOMIZED, polyline0.getDashStyle());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[1][0];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 2919.9714F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-610));
      polyline0.setDashOffset((-610));
      assertEquals((-610.0F), polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 122);
      polyline0.setDashOffset(0.0F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(122, polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(")K~r;RSoI~ZxPc;", floatArray0, 2594.8F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 482.52F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-2458));
      assertFalse(polyline0.isClosedPath());
      
      polyline0.setClosedPath(true);
      assertTrue(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      assertTrue(polyline0.isClosedPath());
      
      polyline0.setClosedPath(false);
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      float[][] floatArray0 = new float[2][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1264));
      assertFalse(polyline0.isClosedPath());
      
      polyline0.setClosedPath(false);
      assertEquals((-1264), polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1689.8204F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 0);
      polyline0.setVisibleIn3D(true);
      polyline0.setElevation(1689.8204F);
      assertEquals(1689.8204F, polyline0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.setVisibleIn3D(true);
      polyline0.setElevation(0);
      assertTrue(polyline0.isVisibleIn3D());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      polyline0.setElevation(1659.9342F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(584.0761F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-419), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[1][9];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.move(0.0F, (-1.0F));
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[0][8];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.move(0.0F, 0.0F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      polyline0.setThickness(1.0F);
      assertEquals(1.0F, polyline0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      float[][] floatArray0 = new float[2][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1264));
      polyline0.setThickness(8.0F);
      assertEquals((-1264), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, (-1.6174669F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 3);
      polyline0.removePoint(3);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertTrue(polyline0.isClosedPath());
      assertEquals(3, polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline("}+MGwX'mIY2", floatArray0, 2522.377F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, (-6032.3223F), polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-2784));
      // Undeclared exception!
      try { 
        polyline0.removePoint(1929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 1929
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, (-562.4866F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-1956));
      // Undeclared exception!
      try { 
        polyline0.removePoint((-1956));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1956
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 122);
      // Undeclared exception!
      try { 
        polyline0.addPoint((float) (-1), 0.0F, 2841);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2841
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[0][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline("2*xJY]j[#c.vD{-", floatArray0, 1810.2544F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 2.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 0);
      // Undeclared exception!
      try { 
        polyline0.addPoint(1810.2544F, 1810.2544F, (-2050));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -2050
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      Level level0 = new Level("DASH_DOT_DOT", (-3186.0F), (-539.44196F), 35.668724F);
      polyline0.setLevel(level0);
      Level level1 = level0.clone();
      level1.setElevationIndex(0);
      boolean boolean0 = polyline0.isAtLevel(level1);
      assertEquals((-3186.0F), polyline0.getGroundElevation(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      Level level0 = new Level("DASH_DOT_DOT", (-3186.0F), (-539.44196F), 4.0F);
      polyline0.setLevel(level0);
      Level level1 = new Level("$?DYMmBPb>`-F\"", (String) null, 0.0F, 2496.6729F, 0.0F);
      boolean boolean0 = polyline0.isAtLevel(level1);
      assertEquals((-3186.0F), polyline0.getGroundElevation(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      Level level0 = new Level("DASH_DOT_DOT", (-3186.0F), (-539.44196F), 35.668724F);
      polyline0.setLevel(level0);
      boolean boolean0 = polyline0.isAtLevel((Level) null);
      assertEquals((-3186.0F), polyline0.getGroundElevation(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Polyline polyline0 = new Polyline(floatArray0);
      Level level0 = new Level("DASH_DOT_DOT", (-3186.0F), (-539.44196F), 35.668724F);
      polyline0.setLevel(level0);
      Level level1 = level0.clone();
      boolean boolean0 = polyline0.isAtLevel(level1);
      assertEquals((-3186.0F), polyline0.getGroundElevation(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 122);
      Level level0 = new Level("a@", "CW(2@_taYm+", (-1), 0.0F, 0.0F);
      boolean boolean0 = polyline0.isAtLevel(level0);
      assertFalse(polyline0.isClosedPath());
      assertEquals(122, polyline0.getColor());
      assertFalse(boolean0);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Polyline polyline0 = new Polyline(floatArray0);
      boolean boolean0 = polyline0.isAtLevel((Level) null);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
      assertTrue(boolean0);
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      float[] floatArray1 = new float[1];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline("}+MGwX'mIY2", floatArray0, 2522.377F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, (-6032.3223F), polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-2784));
      polyline0.setDashPattern(floatArray1);
      polyline0.setDashPattern(floatArray1);
      assertEquals(Polyline.DashStyle.CUSTOMIZED, polyline0.getDashStyle());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      float[] floatArray0 = polyline_DashStyle0.getDashPattern();
      float[][] floatArray1 = new float[2][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray1, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1264));
      polyline0.setDashPattern(floatArray0);
      assertEquals((-1264), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(Polyline.DashStyle.DASH_DOT, polyline0.getDashStyle());
      assertArrayEquals(new float[] {8.0F, 2.0F, 2.0F, 2.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      Polyline.ArrowStyle polyline_ArrowStyle1 = Polyline.ArrowStyle.OPEN;
      polyline0.setEndArrowStyle(polyline_ArrowStyle1);
      assertEquals(Polyline.ArrowStyle.OPEN, polyline0.getEndArrowStyle());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      polyline0.setEndArrowStyle(polyline_ArrowStyle0);
      assertEquals((-419), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(584.0761F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 3246.0F;
      floatArray0[1] = floatArray1;
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 1523.2997F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 3509);
      int int0 = polyline0.getPointIndexAt(1.0F, 3246.0F, 2188.0F);
      assertEquals(1, int0);
      assertTrue(polyline0.isClosedPath());
      assertEquals(3509, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.CUSTOMIZED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 3208.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 122);
      int int0 = polyline0.getPointIndexAt((-1.0F), 3208.0F, 1696.94F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(3208.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(122, polyline0.getColor());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[12][8];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 3521);
      int int0 = polyline0.getPointIndexAt(408.6606F, 0.0F, 0.0F);
      assertEquals((-1), int0);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(3521, polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[1][1];
      float[] floatArray1 = new float[0];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.SOLID;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-2494));
      polyline0.setDashPattern(floatArray1);
      polyline0.getDashPattern();
      assertEquals(Polyline.DashStyle.CUSTOMIZED, polyline0.getDashStyle());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[1][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.SQUARE;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 1);
      polyline0.containsPoint(1.0F, (-718.86F), 0.0F);
      assertEquals(1, polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      float[] floatArray1 = new float[8];
      floatArray0[0] = floatArray1;
      Polyline polyline0 = new Polyline("", floatArray0);
      // Undeclared exception!
      try { 
        polyline0.intersectsRectangle(0.0F, (-3124.222F), 3261.4724F, 781.46F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Polyline", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      float[][] floatArray0 = new float[2][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DELTA;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1264));
      boolean boolean0 = polyline0.containsPoint(0.0F, 8.0F, (-1264));
      assertEquals((-1264), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[5][4];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DISC;
      Polyline polyline0 = new Polyline("", floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-1522));
      polyline0.intersectsRectangle(1028.34F, 4.0F, 0.0F, (-160.89122F));
      assertTrue(polyline0.isClosedPath());
      assertEquals((-1522), polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      polyline0.getLength();
      float float0 = polyline0.getLength();
      assertEquals((-419), polyline0.getColor());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(584.0761F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[1][9];
      Polyline polyline0 = new Polyline(floatArray0);
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      polyline0.setStartArrowStyle(polyline_ArrowStyle0);
      assertEquals(Polyline.ArrowStyle.OPEN, polyline0.getStartArrowStyle());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 0.0F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-1745));
      polyline0.setStartArrowStyle(polyline_ArrowStyle0);
      assertEquals((-1745), polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      polyline0.setVisibleIn3D(true);
      boolean boolean0 = polyline0.isVisibleIn3D();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      boolean boolean0 = polyline0.isVisibleIn3D();
      assertTrue(polyline0.isClosedPath());
      assertEquals(4, polyline0.getColor());
      assertFalse(boolean0);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH;
      float[][] floatArray0 = new float[1][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.MITER;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.NONE;
      Polyline polyline0 = new Polyline(floatArray0, 8.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 4);
      assertEquals(8.0F, polyline0.getThickness(), 0.01F);
      
      boolean boolean0 = polyline0.intersectsRectangle(0.0F, (-300.574F), 8.0F, 0.0F);
      assertFalse(boolean0);
      
      polyline0.containsPoint(0.0F, 4199.131F, (-571.3351F));
      assertTrue(polyline0.isClosedPath());
      assertEquals(4, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[][] floatArray0 = new float[1][7];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.BUTT;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1659.9342F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 584.0761F, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-419));
      polyline0.addPoint(1659.9342F, 1659.9342F);
      float float0 = polyline0.getLength();
      assertEquals(2347.5015F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DISC;
      Polyline polyline0 = new Polyline(floatArray0, 2188.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-887));
      Polyline polyline1 = polyline0.clone();
      assertEquals(2188.0F, polyline1.getThickness(), 0.01F);
      assertEquals((-887), polyline1.getColor());
      assertFalse(polyline1.isClosedPath());
      assertEquals(0.0F, polyline1.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[][] floatArray0 = new float[0][4];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DISC;
      Polyline polyline0 = new Polyline(floatArray0, 2188.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, (-887));
      float float0 = polyline0.getThickness();
      assertEquals((-887), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(2188.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1689.8204F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 0);
      boolean boolean0 = polyline0.isClosedPath();
      assertEquals(1689.8204F, polyline0.getThickness(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[][] floatArray0 = new float[0][8];
      Polyline polyline0 = new Polyline(floatArray0);
      polyline0.getEndArrowStyle();
      assertEquals((-16777216), polyline0.getColor());
      assertFalse(polyline0.isClosedPath());
      assertEquals(1.0F, polyline0.getThickness(), 0.01F);
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, (-793.77686F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 1817.1302F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-532));
      polyline0.getLevel();
      assertTrue(polyline0.isClosedPath());
      assertEquals((-793.77686F), polyline0.getThickness(), 0.01F);
      assertEquals(1817.1302F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-532), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[1][3];
      Polyline polyline0 = new Polyline("jIDP93W", floatArray0);
      float float0 = polyline0.getDashOffset();
      assertEquals((-16777216), polyline0.getColor());
      assertEquals(1.0F, polyline0.getThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, (-793.77686F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 1817.1302F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-532));
      polyline0.move(2850.2805F, (-2700.2258F));
      assertEquals((-793.77686F), polyline0.getThickness(), 0.01F);
      assertEquals((-532), polyline0.getColor());
      assertTrue(polyline0.isClosedPath());
      assertEquals(1817.1302F, polyline0.getDashOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Polyline polyline0 = new Polyline("ELEVATION", floatArray0);
      polyline0.getDashStyle();
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(1.0F, polyline0.getThickness(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1689.8204F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 0);
      polyline0.getPointCount();
      assertFalse(polyline0.isClosedPath());
      assertEquals(0, polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(1689.8204F, polyline0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.ROUND;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline(floatArray0, 1689.8204F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, false, 0);
      int int0 = polyline0.getColor();
      assertEquals(1689.8204F, polyline0.getThickness(), 0.01F);
      assertFalse(polyline0.isClosedPath());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, (-793.77686F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 1817.1302F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-532));
      polyline0.getJoinStyle();
      assertTrue(polyline0.isClosedPath());
      assertEquals(1817.1302F, polyline0.getDashOffset(), 0.01F);
      assertEquals((-793.77686F), polyline0.getThickness(), 0.01F);
      assertEquals((-532), polyline0.getColor());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.BEVEL;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.OPEN;
      Polyline polyline0 = new Polyline("", floatArray0, (-793.77686F), polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, 1817.1302F, polyline_ArrowStyle0, polyline_ArrowStyle0, true, (-532));
      polyline0.getCapStyle();
      assertEquals((-532), polyline0.getColor());
      assertEquals((-793.77686F), polyline0.getThickness(), 0.01F);
      assertEquals(1817.1302F, polyline0.getDashOffset(), 0.01F);
      assertTrue(polyline0.isClosedPath());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Polyline polyline0 = new Polyline("ELEVATION", floatArray0);
      polyline0.getStartArrowStyle();
      assertEquals(1.0F, polyline0.getThickness(), 0.01F);
      assertEquals((-16777216), polyline0.getColor());
      assertEquals(0.0F, polyline0.getDashOffset(), 0.01F);
      assertFalse(polyline0.isClosedPath());
  }
}
