/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:59:30 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.applet.AppletUserPreferences;
import com.eteks.sweethome3d.io.DefaultUserPreferences;
import com.eteks.sweethome3d.io.FileUserPreferences;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.LengthUnit;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.UserPreferences;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.io.File;
import java.math.BigDecimal;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserPreferences_ESTest extends UserPreferences_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      Integer integer0 = new Integer(8);
      defaultUserPreferences0.setNewRoomFloorColor(integer0);
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setValueAddedTaxEnabled(true);
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setLanguage("t*86[+)4w(");
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setNewWallBaseboardThickness((-1.0F));
      fileUserPreferences0.setNewWallBaseboardThickness((-1.0F));
      assertEquals((-1.0F), fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(6);
      linkedList0.add(integer0);
      fileUserPreferences0.setRecentColors(linkedList0);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URL uRL0 = MockURL.getHttpExample();
      AppletUserPreferences appletUserPreferences0 = new AppletUserPreferences(uRLArray0, uRL0, uRLArray0, uRL0, uRL0, uRL0, ",8DBlB8Tbml^dO)Nm]");
      TextureImage textureImage0 = appletUserPreferences0.getWallPattern();
      appletUserPreferences0.setNewWallPattern(textureImage0);
      assertEquals(7.5F, appletUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(appletUserPreferences0.isRulersVisible());
      assertEquals(7.0F, appletUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertTrue(appletUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(10, appletUserPreferences0.getRecentHomesMaxCount());
      assertEquals(128, appletUserPreferences0.getFurnitureModelIconSize());
      assertTrue(appletUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setAerialViewCenteredOnSelectionEnabled(true);
      assertTrue(fileUserPreferences0.isAerialViewCenteredOnSelectionEnabled());
      
      fileUserPreferences0.setAerialViewCenteredOnSelectionEnabled(false);
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setNewWallBaseboardHeight((-2081.0F));
      defaultUserPreferences0.setNewWallBaseboardHeight((-2081.0F));
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setMagnetismEnabled(false);
      assertFalse(fileUserPreferences0.isMagnetismEnabled());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      List<String> list0 = defaultUserPreferences0.getAutoCompletedProperties();
      defaultUserPreferences0.setRecentHomes(list0);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setObserverCameraSelectedAtChange(false);
      fileUserPreferences0.setObserverCameraSelectedAtChange(true);
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URL uRL0 = MockURL.getHttpExample();
      AppletUserPreferences appletUserPreferences0 = new AppletUserPreferences(uRLArray0, uRL0, uRLArray0, uRL0, uRL0, uRL0, ",8DBlB8Tbml^dO)Nm]");
      appletUserPreferences0.setNavigationPanelVisible(false);
      assertFalse(appletUserPreferences0.isNavigationPanelVisible());
      
      appletUserPreferences0.setNavigationPanelVisible(true);
      assertEquals(128, appletUserPreferences0.getFurnitureModelIconSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.getAutoCompletionStrings("6_DLb'");
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      
      defaultUserPreferences0.setCheckUpdatesEnabled(false);
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setCheckUpdatesEnabled(true);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setNewFloorThickness(7.0F);
      fileUserPreferences0.setNewFloorThickness(7.0F);
      assertEquals(7.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      List<String> list0 = fileUserPreferences0.getAutoCompletedProperties();
      fileUserPreferences0.setAutoCompletionStrings("ende", list0);
      fileUserPreferences0.addAutoCompletionString("ende", "t*86[+)4w(nl");
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.addAutoCompletionString("QA4|S?5$IKhD^?zm", "newWallPattern");
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      File[] fileArray0 = new File[9];
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences((File) null, fileArray0);
      fileUserPreferences0.addAutoCompletionString("", "");
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.addAutoCompletionString((String) null, (String) null);
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setRulersVisible(false);
      assertFalse(fileUserPreferences0.isRulersVisible());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setFurnitureCatalogViewedInTree(false);
      assertFalse(defaultUserPreferences0.isFurnitureCatalogViewedInTree());
      
      defaultUserPreferences0.setFurnitureCatalogViewedInTree(true);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setFloorColoredOrTextured(false);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setFloorColoredOrTextured(true);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setLanguage("Z");
      assertEquals("Z", fileUserPreferences0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      TextureImage textureImage0 = defaultUserPreferences0.getNewWallPattern();
      defaultUserPreferences0.setWallPattern(textureImage0);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setFurnitureModelIconSize((-184));
      assertEquals((-184), defaultUserPreferences0.getFurnitureModelIconSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setDefaultFontName("CURRENCY");
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setPhotoRenderer("\"'g^@*l63`nen");
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      
      fileUserPreferences0.setFurnitureViewedFromTop(false);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URL uRL0 = MockURL.getHttpExample();
      AppletUserPreferences appletUserPreferences0 = new AppletUserPreferences(uRLArray0, uRL0, uRLArray0, uRL0, uRL0, uRL0, ",8DBlB8Tbml^dO)Nm]");
      appletUserPreferences0.setFurnitureViewedFromTop(true);
      assertEquals(250.0F, appletUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(10, appletUserPreferences0.getRecentHomesMaxCount());
      assertEquals(128, appletUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.5F, appletUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(7.0F, appletUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL[] uRLArray0 = new URL[0];
      URL uRL0 = MockURL.getHttpExample();
      AppletUserPreferences appletUserPreferences0 = new AppletUserPreferences(uRLArray0, uRLArray0, uRL0, uRL0);
      Long long0 = new Long((-1));
      appletUserPreferences0.setUpdatesMinimumDate(long0);
      assertTrue(appletUserPreferences0.isRoomFloorColoredOrTextured());
      assertTrue(appletUserPreferences0.isRulersVisible());
      assertEquals(12.0F, appletUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(10, appletUserPreferences0.getRecentHomesMaxCount());
      assertEquals(128, appletUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.0F, appletUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setUpdatesMinimumDate((Long) null);
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals("en", fileUserPreferences0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      File[] fileArray0 = new File[4];
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(8540);
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences((File) null, fileArray0, scheduledThreadPoolExecutor0);
      Class<Room> class0 = Room.class;
      fileUserPreferences0.getDefaultTextStyle(class0);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals("en", fileUserPreferences0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      Class<DimensionLine> class0 = DimensionLine.class;
      defaultUserPreferences0.getDefaultTextStyle(class0);
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setGridVisible(false);
      assertFalse(fileUserPreferences0.isGridVisible());
      
      fileUserPreferences0.setGridVisible(true);
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.setCurrency("DEFAULT_VALUE_ADDED_TAX_PERCENTAGE");
      fileUserPreferences0.setCurrency("DEFAULT_VALUE_ADDED_TAX_PERCENTAGE");
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      LengthUnit lengthUnit0 = LengthUnit.CENTIMETER;
      fileUserPreferences0.setUnit(lengthUnit0);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      LinkedList<TextureImage> linkedList0 = new LinkedList<TextureImage>();
      linkedList0.add((TextureImage) null);
      fileUserPreferences0.setRecentTextures(linkedList0);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "PRy$s~FN!eQ#*M5;c");
      File[] fileArray0 = new File[2];
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(12);
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences(mockFile0, fileArray0, forkJoinPool0);
      FileUserPreferences fileUserPreferences1 = new FileUserPreferences();
      BigDecimal bigDecimal0 = fileUserPreferences1.getDefaultValueAddedTaxPercentage();
      assertNotNull(bigDecimal0);
      
      fileUserPreferences0.setDefaultValueAddedTaxPercentage(bigDecimal0);
      assertEquals(7.5F, fileUserPreferences1.getNewWallThickness(), 0.01F);
      assertEquals(10, fileUserPreferences1.getRecentHomesMaxCount());
      assertTrue(fileUserPreferences1.isCheckUpdatesEnabled());
      assertEquals(128, fileUserPreferences1.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setDefaultValueAddedTaxPercentage((BigDecimal) null);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals("en", defaultUserPreferences0.getLanguage());
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.resetIgnoredActionTips();
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      int int0 = fileUserPreferences0.getStoredCamerasMaxCount();
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(50, int0);
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      UserPreferences.Property userPreferences_Property0 = UserPreferences.Property.NEW_FLOOR_THICKNESS;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      fileUserPreferences0.removePropertyChangeListener(userPreferences_Property0, (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(7.5F, fileUserPreferences0.getNewWallThickness(), 0.01F);
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.getLocalizedStringKeys("com.eteks.sweethome3d.model.LengthUnit$5$1InchDecimalsFormat");
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals(1.0F, fileUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      boolean boolean0 = defaultUserPreferences0.isActionTipIgnored("C:7");
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertTrue(boolean0);
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertEquals(7.5F, defaultUserPreferences0.getNewWallThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.write();
      FileUserPreferences fileUserPreferences1 = new FileUserPreferences();
      assertTrue(fileUserPreferences1.isRoomFloorColoredOrTextured());
      assertEquals(10, fileUserPreferences1.getRecentHomesMaxCount());
      assertEquals(7.0F, fileUserPreferences1.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(1.0F, fileUserPreferences1.getNewWallBaseboardThickness(), 0.01F);
      assertEquals(12.0F, fileUserPreferences1.getNewFloorThickness(), 0.01F);
      assertEquals(600000, fileUserPreferences1.getAutoSaveDelayForRecovery());
      assertEquals(128, fileUserPreferences1.getFurnitureModelIconSize());
      assertEquals(250.0F, fileUserPreferences1.getNewWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("_[FAxv#c*", propertyChangeListener0);
      defaultUserPreferences0.addPropertyChangeListener((PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(12.0F, defaultUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals("en", defaultUserPreferences0.getLanguage());
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Language library", propertyChangeListener0);
      fileUserPreferences0.removePropertyChangeListener((PropertyChangeListener) propertyChangeListenerProxy0);
      assertTrue(fileUserPreferences0.isFurnitureViewedFromTop());
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(7.0F, fileUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertEquals("en", fileUserPreferences0.getLanguage());
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      fileUserPreferences0.isDrawingModeEnabled();
      assertTrue(fileUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(600000, fileUserPreferences0.getAutoSaveDelayForRecovery());
      assertEquals(10, fileUserPreferences0.getRecentHomesMaxCount());
      assertEquals(12.0F, fileUserPreferences0.getNewFloorThickness(), 0.01F);
      assertEquals(250.0F, fileUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(fileUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(128, fileUserPreferences0.getFurnitureModelIconSize());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultUserPreferences defaultUserPreferences0 = new DefaultUserPreferences();
      defaultUserPreferences0.setActionTipIgnored("C:7");
      assertEquals(1.0F, defaultUserPreferences0.getNewWallBaseboardThickness(), 0.01F);
      assertTrue(defaultUserPreferences0.isRoomFloorColoredOrTextured());
      assertEquals(600000, defaultUserPreferences0.getAutoSaveDelayForRecovery());
      assertTrue(defaultUserPreferences0.isFurnitureViewedFromTop());
      assertEquals(128, defaultUserPreferences0.getFurnitureModelIconSize());
      assertEquals(7.0F, defaultUserPreferences0.getNewWallBaseboardHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isCheckUpdatesEnabled());
      assertEquals(250.0F, defaultUserPreferences0.getNewWallHeight(), 0.01F);
      assertTrue(defaultUserPreferences0.isMagnetismEnabled());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileUserPreferences fileUserPreferences0 = new FileUserPreferences();
      File[] fileArray0 = fileUserPreferences0.getApplicationFolders();
      Class<AppletUserPreferences> class0 = AppletUserPreferences.class;
      // Undeclared exception!
      try { 
        fileUserPreferences0.getLocalizedString((Class<?>) class0, "|_ey>-*sa$!due(", (Object[]) fileArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown key |_ey>-*sa$!due(
         //
         verifyException("com.eteks.sweethome3d.model.UserPreferences", e);
      }
  }
}
