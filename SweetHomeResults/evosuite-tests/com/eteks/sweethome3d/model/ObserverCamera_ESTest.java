/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:51:21 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.ObserverCamera;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObserverCamera_ESTest extends ObserverCamera_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(1.0F, 2688.63F, 929.0F, 1.0F, 929.0F, (-1.0F));
      observerCamera0.getPoints();
      float[][] floatArray0 = observerCamera0.getPoints();
      assertEquals(4, floatArray0.length);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-968.4268F), 0.0F, 2892.3196F, 0.0F, 602.0F, (-948.7476F));
      observerCamera0.setPlanScale(14.0F);
      observerCamera0.containsPoint(2892.3196F, 0.0F, (-948.7476F));
      assertEquals(14.0F, observerCamera0.getPlanScale(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(1.0F, 1.0F, 1.0F, (-1.0F), (-1.0F), (-4063.3F));
      observerCamera0.setPlanScale(1.0F);
      assertEquals(1.0F, observerCamera0.getPlanScale(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-968.4268F), 0.0F, 2892.3196F, 0.0F, 602.0F, (-948.7476F));
      observerCamera0.containsPoint((-358.2473F), 1357.93F, 0.0F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera(1.0F, 1.0F, 1.0F, (-1.0F), (-1.0F), (-4063.3F));
      observerCamera0.setFixedSize(true);
      assertTrue(observerCamera0.isFixedSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-703.4281F), (-703.4281F), (-703.4281F), (-703.4281F), (-2593.673F), (-2593.673F));
      observerCamera0.setFixedSize(false);
      assertEquals((-753.673F), observerCamera0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-514.0F), (-514.0F), (-514.0F), (-514.0F), (-514.0F), (-514.0F));
      observerCamera0.intersectsRectangle(25.0F, (-514.0F), 0.0F, 62.5F);
      observerCamera0.intersectsRectangle((-1617.0737F), 2690.8115F, 0.0F, 0.0F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera("97>GpJvGMP9", (-1643.446F), (-1210.9415F), 910.245F, 910.245F, (-2529.6F), (-1210.9415F));
      float float0 = observerCamera0.getPlanScale();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-514.0F), (-514.0F), (-514.0F), (-514.0F), (-514.0F), (-514.0F));
      observerCamera0.setZ((-514.0F));
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals((-550.7143F), observerCamera0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-968.4268F), 0.0F, 2892.3196F, 0.0F, 602.0F, (-948.7476F));
      observerCamera0.move((-948.7476F), (-358.2473F));
      assertEquals((-1917.1744F), observerCamera0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera((-968.4268F), 0.0F, 2892.3196F, 0.0F, 602.0F, (-948.7476F));
      observerCamera0.setYaw(0.0F);
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera("", 0.0F, 16.863295F, 16.863295F, 0.0F, (-1.0F), 0.0F);
      observerCamera0.isFixedSize();
      assertEquals(18.067816F, observerCamera0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObserverCamera observerCamera0 = new ObserverCamera("", 0.0F, 16.863295F, 16.863295F, 0.0F, (-1.0F), 0.0F);
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertEquals(8.0F, observerCamera1.getDepth(), 0.01F);
  }
}
