/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:39:11 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomeMaterial;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.Transformation;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.math.BigDecimal;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeLight0.setWidthInPlan(1292.0469F);
      assertTrue(homeLight0.isVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.setAngle(2212.9866F);
      assertEquals(1.3053441F, homeFurnitureGroup0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setElevation(2249.64F);
      assertEquals(2249.64F, homeFurnitureGroup0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setY((-1240.4775F));
      assertEquals((-1240.4775F), homeFurnitureGroup0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "8GP=tP2VC#MIl~QId", resourceURLContent0, resourceURLContent0, 1813.6819F, 1813.6819F, 1813.6819F, 1813.6819F, false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3vx^0_T0");
      boolean boolean0 = homeFurnitureGroup0.intersectsRectangle(1.0F, 14, 1292.0469F, 537.2648F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(boolean0);
      assertEquals(1813.6819F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, 0.3259322F, 0.3259322F, 0.3259322F, 0.3259322F, false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      boolean boolean0 = homeFurnitureGroup0.intersectsRectangle(1.0F, 14, 1292.0469F, 558.88995F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(boolean0);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.3259322F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setModelMirrored(false);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.setAngle(0.0F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      String[] stringArray0 = new String[4];
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[6][0];
      float[] floatArray1 = new float[8];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = new BigDecimal(1503.2F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("?A[yr-,", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "?A[yr-,", "?A[yr-,", stringArray0, (Long) null, (Float) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-463.2956F), 3568.6F, (-253.3F), 2425.5828F, (-1379.0F), false, "MOVABLE", (-2327.0F), (-463.2956F), sashArray0, floatArray0, "O", false, false, false, bigDecimal0, bigDecimal0, "Yvy`rJ':_W1?@");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "O", "O", resourceURLContent0, resourceURLContent0, 1.1729658F, 1.1729658F, 1.1729658F, 1.1729658F, false, lightSourceArray0, floatArray0, "O", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(1.1729658F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(bigDecimal2);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(1.6247402F, homeFurnitureGroup0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertNotNull(bigDecimal1);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.setX((-2228.0454F));
      assertEquals((-2228.0454F), homeFurnitureGroup0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[6][9];
      BigDecimal bigDecimal0 = new BigDecimal((-1209L));
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeFurnitureGroup$LocationAndSizeChangeListener", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "AXx#9.en,", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.setX(0);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.offer(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.deletePieceOfFurniture(homeLight0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.deletePieceOfFurniture(homeLight0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Group can't be empty
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      HomeLight homeLight1 = new HomeLight("v", catalogLight0);
      homeFurnitureGroup0.deletePieceOfFurniture(homeLight1);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.offer(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotNull(bigDecimal1);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[6][9];
      BigDecimal bigDecimal0 = new BigDecimal((-1209L));
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeFurnitureGroup$LocationAndSizeChangeListener", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "AXx#9.en,", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.setWidth(2221.0F);
      assertEquals(2221.0F, homeFurnitureGroup0.getWidthInPlan(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[8];
      float[][] floatArray0 = new float[6][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) (-9));
      CatalogLight catalogLight0 = new CatalogLight("", "level", "level", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "AXx#9.en,", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("level", linkedList0, (-666.96954F), false, "");
      homeFurnitureGroup0.setWidth(0);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.3312845F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidthInPlan(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, 0.3259322F, 0.3259322F, 0.3259322F, 0.3259322F, false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      Level level0 = new Level("", "", (-306.66F), (-95.5336F), 304.0F);
      homeLight0.setLevel(level0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.32592773F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.setHeight(455.04605F);
      assertEquals(455.04605F, homeFurnitureGroup0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "}");
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      homeFurnitureGroup0.setHeight(1.0F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Float float0 = new Float(0.1F);
      homeFurnitureGroup0.setShininess(float0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      linkedList0.offer(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals((byte)28, bigDecimal1.byteValue());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      HomeFurnitureGroup homeFurnitureGroup1 = (HomeFurnitureGroup)homeFurnitureGroup0.duplicate();
      assertFalse(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-95.5336F), false, "");
      Level level0 = new Level("!jN", 14, (-2228.0454F), 2221.0002F);
      homeFurnitureGroup0.setLevel(level0);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(4.997365F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[19];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      assertTrue(homeFurnitureGroup0.isResizable());
      
      homeFurnitureGroup0.setDepth(1552);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setDepth(1552);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "}");
      homeFurnitureGroup0.setDepth(0.0F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      boolean boolean0 = homeFurnitureGroup0.isHorizontallyRotated();
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(boolean0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      Float float0 = new Float(3568.6F);
      float[][] floatArray0 = new float[5][9];
      String[] stringArray0 = new String[0];
      Long long0 = new Long(14);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "3", "3", "LEVEL", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 3568.6F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 4429.0F, 14, false, "", Float.NEGATIVE_INFINITY, (-2228.0454F), sashArray0, floatArray0, "LEVEL", false, false, false, bigDecimal0, bigDecimal0, "MV+5A@)");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("Group can't be empty", "H", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 1998.1F, 0.38295725F, 2345.8726F, (-1066.8368F), true, lightSourceArray0, floatArray0, "", true, (BigDecimal) null, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getValueAddedTax();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.1915282F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.setElevation(2249.64F);
      homeFurnitureGroup0.setElevation(2249.64F);
      assertEquals(2249.64F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      HomeMaterial[] homeMaterialArray0 = new HomeMaterial[1];
      homeFurnitureGroup0.setModelMaterials(homeMaterialArray0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setPrice(bigDecimal0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Can't change the price of a group containing pieces with a price
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "O", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "O", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.setY(0.0F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.scale(304.40167F);
      assertEquals(304.40167F, homeFurnitureGroup0.getHeightInPlan(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, 0.3259322F, 0.3259322F, 0.3259322F, 0.3259322F, false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      boolean boolean0 = homeFurnitureGroup0.containsPoint(14, 0.0F, 1292.0469F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.3259322F, homeFurnitureGroup0.getHeightInPlan(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(boolean0);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      boolean boolean0 = homeFurnitureGroup0.containsPoint((-2228.0454F), (-2228.0454F), (-2228.0454F));
      assertFalse(boolean0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      Float float0 = new Float(3568.6F);
      float[][] floatArray0 = new float[5][9];
      String[] stringArray0 = new String[0];
      Long long0 = new Long(14);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "3", "3", "LEVEL", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 3568.6F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 4429.0F, 14, false, "", Float.NEGATIVE_INFINITY, (-2228.0454F), sashArray0, floatArray0, "LEVEL", false, false, false, bigDecimal0, bigDecimal0, "MV+5A@)");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      assertFalse(homeFurnitureGroup0.isTexturable());
      
      Integer integer0 = new Integer(1552);
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-4429.0F), homeFurnitureGroup0.getHeightInPlan(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getPlanIcon();
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      boolean boolean0 = homeFurnitureGroup0.isMovable();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getIcon();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      float float0 = homeFurnitureGroup0.getWidthInPlan();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      Transformation[] transformationArray0 = new Transformation[7];
      homeFurnitureGroup0.setModelTransformations(transformationArray0);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[4][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getCatalogId();
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getModelSize();
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      Long long0 = new Long(1552);
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setModelSize(long0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set model size of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getCreator();
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      float float0 = homeFurnitureGroup0.getHeightInPlan();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getAllFurniture();
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      Integer integer0 = new Integer(1552);
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.setMovable(false);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      boolean boolean0 = homeFurnitureGroup0.isDoorOrWindow();
      assertFalse(boolean0);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setIcon((Content) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set icon of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setStaircaseCutOutShape("H");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set staircase cut out shape of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getStaircaseCutOutShape();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getShininess();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getCurrency();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getModelTransformations();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setModelRotation(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set model rotation of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      float float0 = homeFurnitureGroup0.getPitch();
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, " ");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight(" ", " ", "H", resourceURLContent0, resourceURLContent0, (-1.8002819F), (-1.8002819F), (-1.8002819F), (-1.8002819F), false, lightSourceArray0, floatArray0, " ", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(" ", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      boolean boolean0 = homeFurnitureGroup0.isModelCenteredAtOrigin();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(boolean0);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getModelMaterials();
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      boolean boolean0 = homeFurnitureGroup0.isHorizontallyRotatable();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertFalse(boolean0);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "H");
      homeFurnitureGroup0.getColor();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getTexture();
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "3Q:", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      float float0 = homeFurnitureGroup0.getRoll();
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setModel(resourceURLContent0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set model of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getInformation();
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      homeFurnitureGroup0.getModel();
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      float float0 = homeFurnitureGroup0.getDropOnTopElevation();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[9];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      BigDecimal bigDecimal0 = new BigDecimal(charArray0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("INFORMATION", "M!p0Q-Es=1a", "INFORMATION", (Content) null, (Content) null, (Content) null, (-1413.44F), (-2324.502F), (-1413.44F), (-1413.44F), true, 1.0F, (-1413.44F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture("INFORMATION", catalogDoorOrWindow0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setBackFaceShown(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set back face shown attribute of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "f", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-95.5336F), false, "");
      boolean boolean0 = homeFurnitureGroup0.isBackFaceShown();
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(boolean0);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(4.997365F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "3", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.addPieceOfFurniture(homeLight0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3x^0_T0:");
      float float0 = homeFurnitureGroup0.getDepthInPlan();
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[5][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 14);
      CatalogLight catalogLight0 = new CatalogLight("", "3", "H", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      // Undeclared exception!
      try { 
        homeFurnitureGroup0.setPlanIcon(resourceURLContent0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't set plan icon of a group
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      LightSource[] lightSourceArray0 = new LightSource[15];
      float[][] floatArray0 = new float[10][9];
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight("", catalogLight0);
      linkedList0.offerLast(homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup("", linkedList0, (-666.6F), false, "");
      homeFurnitureGroup0.getModelRotation();
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isWidthDepthDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(5.7008524F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
  }
}
