/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:26:39 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.SimpleURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogPieceOfFurniture_ESTest extends CatalogPieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("xid(<,", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      String[] stringArray0 = catalogPieceOfFurniture0.getFilterCriteria();
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2, stringArray0.length);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      Integer integer0 = Integer.valueOf(830);
      Long long0 = new Long(830);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("8Rywgie", temporaryURLContent0, temporaryURLContent0, 0.3926991F, 0.0F, 0.0F, 0.0F, false, "8[*Wo#o", integer0, (float[][]) null, true, long0, "8[*Wo#o", 0.0F, true);
      int int0 = catalogPieceOfFurniture1.compareTo(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture1.getDropOnTopElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1, int0);
      assertTrue(catalogPieceOfFurniture1.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      Integer integer0 = Integer.valueOf(830);
      Long long0 = new Long(830);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("8Rywgie", temporaryURLContent0, temporaryURLContent0, 0.3926991F, 0.0F, 0.0F, 0.0F, false, "8[*Wo#o", integer0, (float[][]) null, true, long0, "8[*Wo#o", 0.0F, true);
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals((-1), int0);
      assertEquals(0.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture1.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("~+j", (Content) null, (Content) null, 0.0F, 0.0F, 1026.14F, false, true);
      String[] stringArray0 = new String[6];
      Long long0 = new Long(1L);
      float[][] floatArray0 = new float[3][4];
      BigDecimal bigDecimal0 = new BigDecimal(1L);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("~+j", "M0,0 v1 h1 v-1 z", "", "", stringArray0, long0, (Float) null, (Content) null, (Content) null, (Content) null, 0.0F, 1437.945F, 1437.945F, 315.28F, 1437.945F, true, "jar:", floatArray0, false, (Long) null, "", true, true, true, true, bigDecimal0, (BigDecimal) null, "", hashMap0);
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      assertEquals(0.0F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture1.isHorizontallyRotatable());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertEquals(315.28F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(1437.945F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1437.945F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-1), int0);
      assertEquals(1437.945F, catalogPieceOfFurniture1.getDropOnTopElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Long long0 = new Long(604800000L);
      Float float0 = new Float((-679.0394460752));
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, "", "", "", stringArray0, long0, float0, temporaryURLContent0, resourceURLContent0, temporaryURLContent0, 1710.94F, 1.0F, (-3343.5F), (-3343.5F), 1.0F, true, "v>pG=}7pq)", (float[][]) null, false, "", false, false, false, bigDecimal0, bigDecimal0, (String) null);
      boolean boolean0 = catalogPieceOfFurniture0.matchesFilter("com.eteks.sweethome3d.tools.OperatingSystem$3");
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(boolean0);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(1710.94F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-3343.5F), catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      boolean boolean0 = catalogPieceOfFurniture0.matchesFilter("8[*Wo#o");
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(boolean0);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Long long0 = new Long(0L);
      Float float0 = new Float((double) 46);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s|p{Punct}||", "", 46, "", uRLStreamHandler0);
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("10.10", (String) null);
      hashMap0.put((String) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (String) null, "", "", stringArray0, long0, float0, simpleURLContent0, simpleURLContent0, simpleURLContent0, 0.3926991F, 0L, 1.0F, 0.3926991F, 46, true, (String) null, floatArray0, true, long0, "", true, true, true, true, bigDecimal0, bigDecimal0, "", hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Long long0 = new Long(0L);
      Float float0 = new Float((double) 46);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("s|p{Punct}||", "", 4, "", uRLStreamHandler0);
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put((String) null, "");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (String) null, "", "", stringArray0, long0, float0, simpleURLContent0, simpleURLContent0, simpleURLContent0, 0.3926991F, 0L, 1.0F, 0.3926991F, 4, true, (String) null, floatArray0, true, long0, "", true, true, true, true, bigDecimal0, bigDecimal0, "", hashMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "perclss isnt clonble";
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "perclss isnt clonble");
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("perclss isnt clonble", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.matchesFilter("perclss isnt clonble");
      catalogPieceOfFurniture0.matchesFilter("`");
      catalogPieceOfFurniture0.matchesFilter("perclss isnt clonble");
      Long.getLong("perclss isnt clonble");
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture0);
      catalogPieceOfFurniture0.matchesFilter("g");
      catalogPieceOfFurniture0.isResizable();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("perclss isnt clonble");
      // Undeclared exception!
      try { 
        furnitureCategory0.delete(catalogPieceOfFurniture0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // perclss isnt clonble doesn't contain piece perclss isnt clonble
         //
         verifyException("com.eteks.sweethome3d.model.FurnitureCategory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.5744493F), (-1394.8049F), false, true);
      boolean boolean0 = catalogPieceOfFurniture0.matchesFilter("");
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-1.5744493F), catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      float float0 = catalogPieceOfFurniture0.getHeight();
      assertEquals((-1394.8049F), float0, 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.getInformation();
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Long long0 = new Long((-1182L));
      Float float0 = new Float((double) (-1182L));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, 19);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[+vYJ)9q,)", "!", "[+vYJ)9q,)", ";o5 u3m", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2071.9004F), 2343.653F, (-2071.9004F), 352.0F, (-1182L), false, "1E4|Mz-u42CkO", (float[][]) null, "s|p{Punct}||", false, false, true, bigDecimal0, bigDecimal0, "!");
      float float1 = catalogPieceOfFurniture0.getDropOnTopElevation();
      assertEquals((-2071.9004F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1182.0F), float1, 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2343.653F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(352.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2071.9004F), catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.getCreationDate();
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.getGrade();
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.getModelSize();
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Long long0 = new Long((-3893L));
      Float float0 = new Float((float) (-3893L));
      URL uRL0 = MockURL.getHttpExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[5];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal(1.0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("+^f", "/*}F=klpJ n~gk_+,j", "B}WI/;J}Y^", "s|p{Punct}||", stringArray0, long0, float0, simpleURLContent0, simpleURLContent0, simpleURLContent0, (-3316.484F), (-3893L), 0.0F, 0.0F, false, "com.eteks.sweethome3d.model.PieceOfFurniture", floatArray0, "/*}F=klpJ n~gk_+,j", false, false, false, bigDecimal0, bigDecimal0, "xQ");
      float float1 = catalogPieceOfFurniture0.getElevation();
      assertEquals((-3316.484F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-3893.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Long long0 = new Long(0L);
      Float float0 = new Float((double) 788);
      URL uRL0 = MockURL.getHttpExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      float[][] floatArray0 = new float[8][9];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("vH?", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "vH?", "vH?", stringArray0, long0, float0, simpleURLContent0, simpleURLContent0, simpleURLContent0, (-3529.0F), 0.0F, (-3529.0F), 0.0F, 0.0F, false, "", floatArray0, false, long0, "", true, true, true, false, bigDecimal0, bigDecimal0, "vH?", hashMap0);
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-3529.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-3529.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isHorizontallyRotatable());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.isProportional();
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(1541.568F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleURLContent simpleURLContent0 = new SimpleURLContent((URL) null);
      float[][] floatArray0 = new float[4][9];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("os.version", "os.version", "os.version", simpleURLContent0, simpleURLContent0, 0.0F, (-417.99323F), 0.0F, (-417.99323F), false, floatArray0, "temporarySubFolder", false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getModel();
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-417.99323F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-417.99323F), catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals((-1394.8049F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, (-1627.2933F), false, false);
      catalogPieceOfFurniture0.isBackFaceShown();
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1627.2933F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1393.8723F), (-1.0F), (-1393.8723F), true, true);
      catalogPieceOfFurniture0.isModifiable();
      assertEquals((-1393.8723F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1393.8723F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      Integer integer0 = new Integer(125);
      Long long0 = new Long(604800000L);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 141.85393F, (-1.0F), (-1.0F), (-1.0F), false, (String) null, integer0, (float[][]) null, false, long0, "", 1.0F, false);
      catalogPieceOfFurniture0.getId();
      assertEquals(141.85393F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getCurrency();
      assertEquals(1541.568F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[] floatArray0 = new float[9];
      String[] stringArray0 = new String[6];
      Long long0 = new Long(0L);
      float[][] floatArray1 = new float[7][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", ">yxb7u9h#b#", "1.5.0_16", stringArray0, long0, (Float) floatArray0[7], uRLContent0, uRLContent0, uRLContent0, 0L, (-1.0F), (-1.0F), 2238.36F, 0.0F, false, "", floatArray1, "Application Data", false, true, false, bigDecimal0, (BigDecimal) null, "Unknown resource ");
      float[][] floatArray2 = catalogPieceOfFurniture0.getModelRotation();
      assertEquals(2238.36F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(3, floatArray2.length);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(0);
      float[][] floatArray0 = new float[8][0];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[1];
      Long long0 = new Long(0L);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, "/T6WO\"k8VHQrr", integer0, floatArray0, true, long0, "gh^", 0.0F, false);
      catalogPieceOfFurniture0.getColor();
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Integer integer0 = new Integer(2361);
      float[][] floatArray0 = new float[9][2];
      float[] floatArray1 = new float[6];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, 1562.4F, 1562.4F, 3351.28F, 0.0F, false, "", integer0, floatArray0, true, (-578.309F), true);
      float float0 = catalogPieceOfFurniture0.getDepth();
      assertEquals(1562.4F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(3351.28F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1562.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      BigDecimal bigDecimal0 = new BigDecimal((-1824.8665F));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "Q$HP;Cbr_iapXP*-I", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, (-1824.8665F), true, true, (float[][]) null, "com.eteks.sweethome3d.tools.temporarySubFolder", true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getIcon();
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1824.8665F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(">yxb7u9h#b#", uRLContent0, uRLContent0, (-1.0F), (-1.0F), 0.0F, true, false);
      catalogPieceOfFurniture0.getProperty(">yxb7u9h#b#");
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleURLContent simpleURLContent0 = new SimpleURLContent((URL) null);
      float[][] floatArray0 = new float[4][9];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("os.version", "os.version", "os.version", simpleURLContent0, simpleURLContent0, 0.0F, (-417.99323F), 0.0F, (-417.99323F), false, floatArray0, "temporarySubFolder", false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.isWidthDepthDeformable();
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-417.99323F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-417.99323F), catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", temporaryURLContent0, temporaryURLContent0, (-1394.8049F), (-1.0F), (-1394.8049F), false, true);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = catalogPieceOfFurniture0.clone();
      assertTrue(catalogPieceOfFurniture1.isHorizontallyRotatable());
      assertEquals((-1394.8049F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture1.getDropOnTopElevation(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1394.8049F), catalogPieceOfFurniture1.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      Integer integer0 = new Integer(654);
      float[][] floatArray0 = new float[3][3];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("jar", simpleURLContent0, simpleURLContent0, 425.37F, 425.37F, 425.37F, 839.19F, true, true, integer0, floatArray0, true, 839.19F, true);
      catalogPieceOfFurniture0.isDeformable();
      assertEquals(839.19F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(425.37F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(425.37F, catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      Integer integer0 = new Integer(654);
      float[][] floatArray0 = new float[3][3];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("jar", simpleURLContent0, simpleURLContent0, 425.37F, 425.37F, 425.37F, 839.19F, true, true, integer0, floatArray0, true, 839.19F, true);
      catalogPieceOfFurniture0.isTexturable();
      assertEquals(839.19F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      Integer integer0 = new Integer(654);
      float[][] floatArray0 = new float[3][3];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("jar", simpleURLContent0, simpleURLContent0, 425.37F, 425.37F, 425.37F, 839.19F, true, true, integer0, floatArray0, true, 839.19F, true);
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(boolean0);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(425.37F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(839.19F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "qYzy9EkG(X]zYN", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, ".j[WIW1ct^k?VOUm*", (float[][]) null, "qYzy9EkG(X]zYN", true, true, true, bigDecimal0, bigDecimal0, "@.");
      catalogPieceOfFurniture0.getPrice();
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("~+j", (Content) null, (Content) null, 0.0F, 0.0F, 1026.14F, false, true);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1026.14F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(classLoader0, "");
      Integer integer0 = new Integer(125);
      Long long0 = new Long(604800000L);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 141.85393F, (-1.0F), (-1.0F), (-1.0F), false, (String) null, integer0, (float[][]) null, false, long0, "", 1.0F, false);
      catalogPieceOfFurniture0.getPropertyNames();
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(141.85393F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[7][8];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", "", "JV.-:", uRLContent0, uRLContent0, uRLContent0, 1.0F, 1.0F, 1.0F, 1.0F, false, floatArray0, "JV.-:", false, (BigDecimal) null, (BigDecimal) null);
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(1039);
      float[][] floatArray0 = new float[8][5];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.tools.TemporaryURLContent", (Content) null, (Content) null, 0.0F, 0.0F, (-1533.9246F), (-1618.7719F), true, "com.eteks.sweethome3d.tools.TemporaryURLContent", integer0, floatArray0, true, 623.79F, true);
      catalogPieceOfFurniture0.equals(floatArray0[0]);
      assertEquals((-1533.9246F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1618.7719F), catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, 968.4347F, 0.0F, 968.4347F, false, true);
      boolean boolean0 = catalogPieceOfFurniture0.isHorizontallyRotatable();
      assertTrue(boolean0);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertEquals(968.4347F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(968.4347F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8Rywgie", "8Rywgie", "8Rywgie", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1541.568F, 0.0F, 0.0F, 0.0F, false, (float[][]) null, "8[*Wo#o", true, false, true, bigDecimal0, bigDecimal0);
      float float0 = catalogPieceOfFurniture0.getIconYaw();
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1541.568F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, float0, 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SimpleURLContent simpleURLContent0 = new SimpleURLContent(uRL0);
      Integer integer0 = new Integer(654);
      float[][] floatArray0 = new float[3][3];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("jar", simpleURLContent0, simpleURLContent0, 425.37F, 425.37F, 425.37F, 839.19F, true, true, integer0, floatArray0, true, 839.19F, true);
      catalogPieceOfFurniture0.hashCode();
      assertEquals(425.37F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(425.37F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(425.37F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(839.19F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isHorizontallyRotatable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDropOnTopElevation(), 0.01F);
  }
}
