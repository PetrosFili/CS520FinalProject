/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:54:56 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[3];
      floatArray1[1] = (-1941.9363F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (-503.2F);
      floatArray0[3] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setPoint(0.0F, 1132.7969F, 1);
      assertEquals(566.39844F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setPoint((-33.511436F), 1132.7969F, 1);
      assertEquals((-16.755718F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(550.8985F, 0.0F, 2138073112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2138073112
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setPoint(0.0F, 0.0F, 1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      // Undeclared exception!
      try { 
        room0.setPoint(1922.6469F, (-513.6738F), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[5][0];
      Room room0 = new Room(floatArray0);
      room0.setPoints(floatArray0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setFloorVisible(false);
      assertFalse(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isFloorVisible());
      
      room0.setFloorVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(1101.797F);
      assertEquals(2.2395682F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.setNameAngle(0.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      room0.setLevel((Level) null);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2047));
      Integer integer1 = new Integer((-2047));
      room0.setCeilingColor(integer1);
      room0.setCeilingColor(integer0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2058));
      room0.setCeilingColor(integer0);
      room0.setCeilingColor((Integer) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setAreaXOffset((-2533.5F));
      assertEquals((-2533.5F), room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setAreaXOffset(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-370.6F), 1789.1036F, 0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      Room room0 = new Room("ap", floatArray0);
      float[] floatArray2 = room0.getBoundsMaximumCoordinates();
      assertEquals(2, floatArray2.length);
      
      float[] floatArray3 = room0.getBoundsMinimumCoordinates();
      assertEquals(2, floatArray3.length);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      room0.setCeilingShininess((-3743.197F));
      assertEquals((-3743.197F), room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      room0.setCeilingShininess(0.0F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      CatalogTexture catalogTexture0 = new CatalogTexture("@'wI:BLn$xyU}`3p", (Content) null, (-1941.9363F), (-2423.4F), false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, (-1941.9363F), 1.0F, false);
      room0.setCeilingTexture(homeTexture0);
      HomeTexture homeTexture1 = new HomeTexture(homeTexture0, (-1941.9363F), false);
      room0.setCeilingTexture(homeTexture1);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("a8oS3>yb%}}Q", temporaryURLContent0, 1.0F, (-1747.8472F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      room0.setCeilingTexture(homeTexture0);
      room0.setCeilingTexture((HomeTexture) null);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      room0.setNameXOffset(370.3F);
      assertEquals(370.3F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset(0.0F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[7][2];
      Room room0 = new Room(floatArray0);
      room0.setAreaVisible(false);
      assertFalse(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(true);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[5][0];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(1.0F);
      assertEquals(1.0F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      float[] floatArray1 = room0.getBoundsMinimumCoordinates();
      assertEquals(2, floatArray1.length);
      
      float[] floatArray2 = room0.getBoundsMaximumCoordinates();
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray2.length);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(">nq}tA^-zg(!T<wN|-", floatArray0);
      room0.move(0.0F, 1.0F);
      assertEquals(1.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, 0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[7][5];
      Room room0 = new Room(floatArray0);
      room0.move(227.19995F, (-2119.0012F));
      assertEquals(227.19995F, room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[7][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 21
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.removePoint(1);
      // Undeclared exception!
      try { 
        room0.removePoint(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least one point
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[7][1];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room("FLOOR_VISIBLE", floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint(0.0F, 0.0F, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 13
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[4][0];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.addPoint(0.0F, 0.0F, (-1706));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index -1706
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[7];
      floatArray1[1] = 2395.729F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(452.26627F, 1.0F, 776.43F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertEquals(2395.729F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(1132.7969F, 370.3F, (-40.0F));
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[15][2];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("com.eteks.sweethome3d.tools.TemporaryURLContent", 0, (-180.0234F), 0);
      room0.setLevel(level0);
      Level level1 = level0.clone();
      boolean boolean0 = room0.isAtLevel(level1);
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[15][2];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("com.eteks.sweethome3d.tools.TemporaryURLContent", 1053.0414F, (-180.023F), 2365.83F);
      room0.setLevel(level0);
      Level level1 = new Level("com.eteks.sweethome3d.tools.TemporaryURLContent-08000000-0900-4000-8a00-00000b000000", "com.eteks.sweethome3d.tools.TemporaryURLContent", (-180.023F), 1053.0414F, (-180.023F));
      boolean boolean0 = room0.isAtLevel(level1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[15][2];
      Room room0 = new Room(floatArray0);
      Level level0 = new Level("com.eteks.sweethome3d.tools.TemporaryURLContent", 1053.0414F, (-180.023F), 2365.83F);
      boolean boolean0 = room0.isAtLevel(level0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      boolean boolean0 = room0.isAtLevel((Level) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[7][0];
      Room room0 = new Room("", floatArray0);
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", temporaryURLContent0, (-3202.9934F), (-3202.9934F), false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0, 0.0F, (-708.82733F), (-3202.9934F), 0.0F, false);
      room0.setFloorTexture(homeTexture0);
      room0.setFloorTexture((HomeTexture) null);
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setFloorTexture((HomeTexture) null);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      float float0 = room0.getArea();
      assertEquals(0.0F, float0, 0.01F);
      
      room0.getBoundsMinimumCoordinates();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 735.8F;
      floatArray1[1] = (-1941.9363F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[1] = (-1941.9363F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = (-503.2F);
      floatArray0[3] = floatArray3;
      Room room0 = new Room(floatArray0);
      float float0 = room0.getArea();
      assertEquals(622714.1F, float0, 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.getArea();
      float float0 = room0.getArea();
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[7][6];
      Room room0 = new Room("cot.etek|.sweeGhome3d.io.HomeURLContent", floatArray0);
      room0.setAreaYOffset((-3559.4158F));
      assertEquals((-3559.4158F), room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room("ap", floatArray0);
      room0.setName("ap");
      room0.setName((String) null);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      room0.setName((String) null);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 714.1777F;
      floatArray1[1] = 2228.407F;
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      int int0 = room0.getPointIndexAt(714.1777F, 4.694792F, 227.19995F);
      assertEquals((-1), int0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      Room room0 = new Room("ap", floatArray0);
      int int0 = room0.getPointIndexAt(1089.0128F, 0.0F, 1089.0128F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      Room room0 = new Room("ap", floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      room0.setNameYOffset(0.0F);
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      Room room0 = null;
      try {
        room0 = new Room(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least two points
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.setCeilingFlat(false);
      assertFalse(room0.isCeilingFlat());
      
      room0.setCeilingFlat(true);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingFlat());
      
      room0.setCeilingFlat(true);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room("*jiv\"iC)DN:r$|e", floatArray0);
      TextStyle textStyle0 = new TextStyle("*jiv\"iC)DN:r$|e", 0.0F, true, true);
      room0.setNameStyle(textStyle0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room("?a;qbvXV_.=", floatArray0);
      room0.setNameStyle((TextStyle) null);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-2047));
      room0.setFloorColor(integer0);
      Integer integer1 = new Integer((-2047));
      room0.setFloorColor(integer1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[][] floatArray0 = new float[5][0];
      Room room0 = new Room(floatArray0);
      Integer integer0 = new Integer((-1540));
      room0.setFloorColor(integer0);
      room0.setFloorColor((Integer) null);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room("!/", floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(488.01F, (-1066.3055F), 3794.2454F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[][] floatArray0 = new float[5][0];
      Room room0 = new Room(floatArray0);
      room0.setCeilingVisible(false);
      assertFalse(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(true);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room("AREA_VISIBLE", floatArray0);
      TextStyle textStyle0 = new TextStyle(0.0F, false, false);
      room0.setAreaStyle(textStyle0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float[][] floatArray0 = new float[5][5];
      Room room0 = new Room(floatArray0);
      room0.setAreaStyle((TextStyle) null);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setFloorShininess((-1.0F));
      assertEquals((-1.0F), room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room("jzL", floatArray0);
      room0.setFloorShininess(0.0F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      Room room0 = new Room("CEILING_FLAT", floatArray0);
      boolean boolean0 = room0.isAreaVisible();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(boolean0);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      Room room0 = new Room(floatArray0);
      room0.getAreaStyle();
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(0.0F, 0.0F, 0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      room0.getPointCount();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingFlat());
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[][] floatArray0 = new float[6][0];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getCeilingShininess();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[7];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isAreaCenterPointAt(452.26627F, 1.0F, 776.43F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(boolean0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.getNameStyle();
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      float[][] floatArray0 = new float[2][2];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.intersectsRectangle((-2054.4F), 11.0F, (-2033.633F), (-2033.633F));
      assertTrue(room0.isAreaVisible());
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      room0.getFloorTexture();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      float[][] floatArray0 = new float[8][9];
      Room room0 = new Room("Home", floatArray0);
      room0.isSingular();
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      float[][] floatArray0 = new float[9][6];
      Room room0 = new Room("", floatArray0);
      boolean boolean0 = room0.isFloorVisible();
      assertTrue(room0.isAreaVisible());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.getFloorColor();
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[2];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      Room room0 = new Room("ap", floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(3876.1936F, (-3456.9934F), 0.0F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      float[][] floatArray0 = new float[2][9];
      Room room0 = new Room("AREA_ANGLE", floatArray0);
      room0.addPoint((-1579.7F), 1299.0536F);
      assertEquals(649.5268F, room0.getYCenter(), 0.01F);
      
      room0.setPoints(floatArray0);
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      float float0 = room0.getNameAngle();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      float[][] floatArray0 = new float[2][4];
      Room room0 = new Room(floatArray0);
      room0.containsPoint(3331.0535F, 1789.1036F, (-1872.549F));
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isCeilingFlat();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room("ap", floatArray0);
      room0.getCeilingColor();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room("ap", floatArray0);
      float float0 = room0.getAreaAngle();
      assertTrue(room0.isCeilingFlat());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      float[][] floatArray0 = new float[4][5];
      Room room0 = new Room(floatArray0);
      room0.getLevel();
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      float[][] floatArray0 = new float[4][8];
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isCeilingVisible();
      assertTrue(boolean0);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      float[][] floatArray0 = new float[8][9];
      Room room0 = new Room("Home", floatArray0);
      room0.getName();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      room0.getCeilingTexture();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isCeilingFlat());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room("'Dq:| #)IGmg$_w%9", floatArray0);
      float float0 = room0.getFloorShininess();
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingFlat());
      assertTrue(room0.isAreaVisible());
  }
}
