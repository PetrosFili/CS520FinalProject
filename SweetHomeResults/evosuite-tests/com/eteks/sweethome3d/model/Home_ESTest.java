/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 03:32:58 GMT 2022
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomeObject;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Polyline;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("8eX3Pv_!", "8eX3Pv_!", 7000L, 7000L, 7000L);
      home0.addLevel(level0);
      level0.setElevationIndex(8);
      assertEquals("8eX3Pv_!", level0.getName());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("8eX3Pv_!", "8eX3Pv_!", 7000L, 7000L, 7000L);
      home0.addLevel(level0);
      level0.setViewable(false);
      assertEquals(0, level0.getElevationIndex());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("", 7000L, 7000L, (-2189.4705F));
      home0.addLevel(level0);
      level0.setElevation(0.0F);
      assertEquals(0, level0.getElevationIndex());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home(0.0F);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Home home0 = new Home();
      URLContent uRLContent0 = new URLContent((URL) null);
      BackgroundImage backgroundImage0 = new BackgroundImage(uRLContent0, 2168.0393F, 0.7853982F, 2168.0393F, 7000L, 3967.9F, 0.7853982F, 45.8F);
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      linkedList0.add((Label) null);
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      Label label0 = new Label("h'pbvw0", "h'pbvw0", (-429.75967F), (-429.75967F));
      linkedList0.add(label0);
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Home home0 = new Home();
      Float float0 = new Float(831.8F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = new BigDecimal((-2098930424));
      CatalogLight catalogLight0 = new CatalogLight(":734#sG%{UcI%;0", (String) null, ":734#sG%{UcI%;0", "YCEYp-", (String[]) null, (Long) 7000L, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 554.43F, 831.8F, 554.43F, (-3370.548F), false, lightSourceArray0, "o~XhGRx77", (float[][]) null, "YCEYp-", false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      home0.addPieceOfFurniture(homePieceOfFurniture0);
      home0.deletePieceOfFurniture(homePieceOfFurniture0);
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Home home0 = new Home((-456.09317F));
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[1];
      float[][] floatArray0 = new float[6][5];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("bZm}:Ov/%", "com.eteks.sweethome3d.swing.HomeComponent3D.detachedViewY", "~:kGG)WS1(tQmr", uRLContent0, uRLContent0, uRLContent0, (-456.09317F), 0.0F, (-1179.7098F), 7000L, false, lightSourceArray0, floatArray0, "t", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, 7000L, false, "America/Aruba");
      home0.deletePieceOfFurniture(homeFurnitureGroup0);
      assertEquals((-456.09317F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Home home0 = new Home();
      DimensionLine dimensionLine0 = new DimensionLine("", 7000L, 7000L, 0.0F, 7000L, 7000L);
      home0.addDimensionLine(dimensionLine0);
      home0.deleteDimensionLine(dimensionLine0);
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home(0.19634955F);
      DimensionLine dimensionLine0 = new DimensionLine("[QP+b", 7000L, 7000L, 7000L, (-544.05F), 0.0F);
      home0.deleteDimensionLine(dimensionLine0);
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(true);
      home0.setBasePlanLocked(false);
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      float[][] floatArray0 = new float[2][2];
      Polyline polyline0 = new Polyline(floatArray0);
      home0.addPolyline(polyline0, 0);
      home0.deletePolyline(polyline0);
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Home home0 = new Home(0.0F);
      float[][] floatArray0 = new float[1][5];
      Polyline.CapStyle polyline_CapStyle0 = Polyline.CapStyle.ROUND;
      Polyline.JoinStyle polyline_JoinStyle0 = Polyline.JoinStyle.CURVED;
      Polyline.DashStyle polyline_DashStyle0 = Polyline.DashStyle.DASH_DOT;
      Polyline.ArrowStyle polyline_ArrowStyle0 = Polyline.ArrowStyle.DISC;
      Polyline polyline0 = new Polyline(floatArray0, 0.0F, polyline_CapStyle0, polyline_JoinStyle0, polyline_DashStyle0, polyline_ArrowStyle0, polyline_ArrowStyle0, true, 0);
      home0.deletePolyline(polyline0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      List<Polyline> list0 = Home.getPolylinesSubList(linkedList0);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      Home home0 = new Home(list1);
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      home0.deleteRoom(room0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Home home0 = new Home((-47.582F));
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      Compass compass0 = home0.getCompass();
      linkedList0.add(compass0);
      assertEquals((-47.582F), home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("compass-homeCompass", compass0.getId());
      
      Class<Object> class0 = Object.class;
      List<Object> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Home home0 = new Home();
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 7000L, 0.0F, 0.0F, 7000L, 0.0F, 7000L, true, true, true, (Float) null, "HR!Wf", (String) null);
      home0.setPrint(homePrint0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.setPrint((HomePrint) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Home home0 = new Home();
      Float float0 = new Float(831.8F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = new BigDecimal((-2098930424));
      CatalogLight catalogLight0 = new CatalogLight(":734#sG%{UcI%;0", (String) null, ":734#sG%{UcI%;0", "YCEYp-", (String[]) null, (Long) 7000L, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 554.43F, 831.8F, 554.43F, (-3370.548F), false, lightSourceArray0, "o~XhGRx77", (float[][]) null, "YCEYp-", false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      home0.addPieceOfFurniture(homePieceOfFurniture0);
      Home home1 = new Home(home0);
      assertEquals(7000L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Home home0 = new Home();
      home0.setProperty((String) null, ",^6h>");
      Number number0 = home0.getNumericProperty((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Home home0 = new Home(1050.0F);
      home0.getNumericProperty("ELEVATION_INDEX");
      assertEquals(1050.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      home0.setFurnitureVisibleProperties(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Home home0 = new Home(list0);
      Label label0 = new Label("sppqK|j39ZiSAOF?A", (-842.0F), 0.0F);
      home0.addLabel(label0);
      home0.deleteLabel(label0);
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home home0 = new Home((-2058.7744F));
      Label label0 = new Label("Ab", (-789.798F), (-2058.7744F));
      home0.deleteLabel(label0);
      assertEquals((-2058.7744F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      home0.setRepaired(true);
      assertTrue(home0.isRepaired());
      
      home0.setRepaired(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setRepaired(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = new Home(1050.0F);
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      home0.setCamera(observerCamera0);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals("observerCamera-homeObserverCamera", observerCamera0.getId());
      
      Home home1 = home0.clone();
      assertEquals(7000L, home1.getVersion());
      assertEquals(1050.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      
      Label label0 = new Label("sppqK|j39ZiSAOF?A", (-842.0F), (-842.0F));
      home0.addLabel(label0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      assertTrue(home0.isEmpty());
      
      float[][] floatArray0 = new float[2][2];
      Polyline polyline0 = new Polyline(floatArray0);
      home0.addPolyline(polyline0, 0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Home home0 = new Home(list0);
      assertTrue(home0.isEmpty());
      
      DimensionLine dimensionLine0 = new DimensionLine("", (-186.04643F), (-842.0F), (-842.0F), (-1621.5F), 7000L);
      home0.addDimensionLine(dimensionLine0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      
      float[][] floatArray0 = new float[5][2];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      
      Wall wall0 = new Wall("HEIGHT", 7000L, 7000L, 7000L, 1950.8383F, 7000L, (-761.9171F));
      home0.addWall(wall0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Home home0 = new Home(list0);
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.push((HomePieceOfFurniture) null);
      Home home0 = new Home(linkedList0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Home home0 = new Home((-2058.7744F));
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isFurnitureDescendingSorted());
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals((-2058.7744F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("8eX3Pv_!", "8eX3Pv_!", 7000L, 7000L, 7000L);
      home0.addLevel(level0);
      assertEquals(0, level0.getElevationIndex());
      
      Level level1 = new Level((String) null, 7000L, 1.0F, (-98.4761F));
      home0.addLevel(level1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("8eX3Pv_!", "8eX3Pv_!", 7000L, 7000L, 7000L);
      home0.addLevel(level0);
      assertEquals(0, level0.getElevationIndex());
      
      Level level1 = new Level((String) null, 0.0F, 1.0F, (-98.4761F));
      home0.addLevel(level1);
      assertEquals(0, level1.getElevationIndex());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("", 7000L, 7000L, (-2189.4705F));
      home0.addLevel(level0);
      home0.addLevel(level0);
      assertEquals(0, level0.getElevationIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Home home0 = new Home((-105.03333F));
      Level level0 = new Level("com.eteks.sweethome3d.swing.PhotoPanel.PhotoDialogY", (String) null, 1166.854F, 2749.8F, 2749.8F);
      home0.setSelectedLevel(level0);
      assertEquals((-105.03333F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.setSelectedLevel((Level) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.setModified(true);
      assertTrue(home0.isModified());
      
      home0.setModified(false);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setModified(true);
      home0.setModified(true);
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.push((HomePieceOfFurniture) null);
      Home home0 = new Home(linkedList0);
      // Undeclared exception!
      try { 
        home0.getSelectableViewableItems();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("8eX3Pv_!", "8eX3Pv_!", 7000L, 7000L, 7000L);
      DimensionLine dimensionLine0 = new DimensionLine("Pacific/Tongatapu", (-190.16304F), 7000.0F, (-190.16304F), (-190.16304F), 1030.054F);
      home0.addDimensionLine(dimensionLine0);
      home0.addLevel(level0);
      home0.deleteLevel(level0);
      assertFalse(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.deleteLevel((Level) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home();
      home0.setProperty((String) null, "RIGHT_SIDE_TEXTURE");
      home0.setProperty((String) null, (String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      home0.setProperty((String) null, (String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home();
      home0.setName("8eX3Pv_!");
      home0.setName((String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.setName((String) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Home home0 = new Home((-186.0F));
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      ObserverCamera observerCamera0 = new ObserverCamera("com.eteks.sweethome3d.model.Home$4", 7000L, 0.0F, 0.0F, (-3072.1377F), 2484.26F, 7000L);
      linkedList0.add((Camera) observerCamera0);
      home0.setStoredCameras(linkedList0);
      assertEquals((-186.0F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      Class<Polyline> class0 = Polyline.class;
      List<Polyline> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(list0);
      Home home0 = new Home(list1);
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home((-47.582F));
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      
      home0.setCamera(camera0);
      assertEquals((-47.582F), home0.getWallHeight(), 0.01F);
      assertEquals(1050.0F, camera0.getY(), 0.01F);
      assertEquals(50.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals("camera-homeTopCamera", camera0.getId());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1010.0F, camera0.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Polyline> linkedList0 = new LinkedList<Polyline>();
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Class<Wall> class1 = Wall.class;
      List<Wall> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      home0.setSelectedItems(list1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Home home0 = new Home((-86.625F));
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      List<Polyline> list1 = Home.getPolylinesSubList(list0);
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      home0.setSelectedItems(list1);
      assertEquals(7000L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Home home0 = new Home(3917.0276F);
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room("", floatArray0);
      home0.addRoom(room0);
      List<Selectable> list0 = home0.getSelectableViewableItems();
      assertEquals(2, list0.size());
      assertEquals(3917.0276F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Home home0 = new Home((-2028.11F));
      home0.setRecovered(true);
      assertTrue(home0.isRecovered());
      
      home0.setRecovered(false);
      assertEquals((-2028.11F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home(1448.3978F);
      home0.setAllLevelsSelection(true);
      assertTrue(home0.isAllLevelsSelection());
      
      home0.setAllLevelsSelection(false);
      assertEquals(1448.3978F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Home home0 = new Home();
      home0.setAllLevelsSelection(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.push((HomePieceOfFurniture) null);
      Home home0 = new Home(linkedList0);
      List<HomeObject> list0 = home0.getHomeObjects();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.isRepaired();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home(2369.0837F);
      home0.getFurnitureSortedProperty();
      assertEquals(2369.0837F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Home home0 = new Home();
      home0.getVisualProperty((String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Home home0 = new Home();
      List<Polyline> list0 = home0.getPolylines();
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      Home.getPolylinesSubList(list1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home();
      home0.getPrint();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.isAllLevelsSelection();
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Home home0 = new Home(1448.3978F);
      // Undeclared exception!
      try { 
        home0.addPieceOfFurnitureToGroup((HomePieceOfFurniture) null, (HomeFurnitureGroup) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Home home0 = new Home((-105.03333F));
      home0.addRoomsListener((CollectionListener<Room>) null);
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Home home0 = new Home((-2028.11F));
      home0.getLevels();
      assertEquals((-2028.11F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.getBackgroundImage();
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home(0.0F);
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Home home0 = new Home();
      List<Selectable> list0 = home0.getSelectableViewableItems();
      home0.setVisualProperty("", list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall((-4193.8F), 7000L, 7000L, 19.7F, 19.7F, 7000L);
      home0.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Polyline> collectionListener0 = (CollectionListener<Polyline>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removePolylinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.getName();
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Home home0 = new Home();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.SweetHome3D.FrameHeight", propertyChangeListener0);
      home0.removePropertyChangeListener("", (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      Home.Property home_Property0 = Home.Property.ALL_LEVELS_SELECTION;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Australia/Tasmania", propertyChangeListener0);
      home0.removePropertyChangeListener(home_Property0, (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setVersion(1642L);
      assertEquals(1642L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.getRooms();
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Home home0 = new Home();
      Float float0 = new Float(831.8F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = new BigDecimal((-2098930424));
      CatalogLight catalogLight0 = new CatalogLight(":734#sG%{UcI%;0", (String) null, ":734#sG%{UcI%;0", "YCEYp-", (String[]) null, (Long) 7000L, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 554.43F, 831.8F, 554.43F, (-3370.548F), false, lightSourceArray0, "o~XhGRx77", (float[][]) null, "YCEYp-", false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      home0.addPieceOfFurniture(homePieceOfFurniture0);
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Home home0 = new Home();
      home0.isRecovered();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Home home0 = new Home();
      Home.Property home_Property0 = Home.Property.MODIFIED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("BACKGROUND_IMAGE", propertyChangeListener0);
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Home home0 = new Home();
      home0.isModified();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Home home0 = new Home();
      home0.getDimensionLines();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Home home0 = new Home();
      home0.getProperty("");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Home home0 = new Home();
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      Home.getLabelsSubList(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home((-2028.11F));
      home0.getCamera();
      Camera camera0 = home0.getCamera();
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1050.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, camera0.getX(), 0.01F);
      assertNotNull(camera0);
      assertEquals((-2028.11F), home0.getWallHeight(), 0.01F);
      assertEquals(1010.0F, camera0.getZ(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals("camera-homeTopCamera", camera0.getId());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      home0.getSelectedLevel();
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Home home0 = new Home();
      home0.isBasePlanLocked();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home home0 = new Home((-88.25F));
      home0.getPropertyNames();
      assertEquals((-88.25F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      home0.addPropertyChangeListener("", (PropertyChangeListener) propertyChangeListenerProxy0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      float[][] floatArray0 = new float[2][2];
      Polyline polyline0 = new Polyline(floatArray0);
      home0.addPolyline(polyline0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      home0.isFurnitureDescendingSorted();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Home home0 = new Home();
      List<Camera> list0 = home0.getStoredCameras();
      home0.setStoredCameras(list0);
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      home0.getLabels();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Home home0 = new Home((-2028.11F));
      CollectionListener<Polyline> collectionListener0 = (CollectionListener<Polyline>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addPolylinesListener(collectionListener0);
      assertEquals((-2028.11F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Home home0 = new Home();
      long long0 = home0.getVersion();
      assertEquals(7000L, long0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home();
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("environment-homeEnvironment", homeEnvironment0.getId());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }
}
