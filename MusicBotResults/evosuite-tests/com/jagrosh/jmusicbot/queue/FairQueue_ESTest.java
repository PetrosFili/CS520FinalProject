/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 28 01:04:06 GMT 2022
 */

package com.jagrosh.jmusicbot.queue;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jagrosh.jmusicbot.audio.QueuedTrack;
import com.jagrosh.jmusicbot.queue.FairQueue;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FairQueue_ESTest extends FairQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      // Undeclared exception!
      try { 
        fairQueue0.skip(687);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.skip(0);
      assertTrue(fairQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.add((QueuedTrack) null);
      // Undeclared exception!
      try { 
        fairQueue0.shuffle(630L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jagrosh.jmusicbot.queue.FairQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      int int0 = fairQueue0.shuffle(0L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.add((QueuedTrack) null);
      // Undeclared exception!
      try { 
        fairQueue0.removeAll(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jagrosh.jmusicbot.queue.FairQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      int int0 = fairQueue0.removeAll((-2170L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      boolean boolean0 = fairQueue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      assertTrue(fairQueue0.isEmpty());
      
      fairQueue0.add((QueuedTrack) null);
      boolean boolean0 = fairQueue0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.addAt(0, (QueuedTrack) null);
      assertEquals(1, fairQueue0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.add((QueuedTrack) null);
      fairQueue0.addAt(0, (QueuedTrack) null);
      assertFalse(fairQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.add((QueuedTrack) null);
      // Undeclared exception!
      try { 
        fairQueue0.add((QueuedTrack) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jagrosh.jmusicbot.queue.FairQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      // Undeclared exception!
      try { 
        fairQueue0.remove(2628);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2628, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      // Undeclared exception!
      try { 
        fairQueue0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      List<QueuedTrack> list0 = fairQueue0.getList();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      // Undeclared exception!
      try { 
        fairQueue0.moveItem(0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      // Undeclared exception!
      try { 
        fairQueue0.pull();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      int int0 = fairQueue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FairQueue<QueuedTrack> fairQueue0 = new FairQueue<QueuedTrack>();
      fairQueue0.clear();
      assertEquals(0, fairQueue0.size());
  }
}
